// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/kanowfy/donorbox/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Notification is an autogenerated mock type for the Notification type
type Notification struct {
	mock.Mock
}

type Notification_Expecter struct {
	mock *mock.Mock
}

func (_m *Notification) EXPECT() *Notification_Expecter {
	return &Notification_Expecter{mock: &_m.Mock}
}

// GetNotificationsForUser provides a mock function with given fields: ctx, userID
func (_m *Notification) GetNotificationsForUser(ctx context.Context, userID int64) ([]model.Notification, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsForUser")
	}

	var r0 []model.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]model.Notification, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Notification); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Notification_GetNotificationsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationsForUser'
type Notification_GetNotificationsForUser_Call struct {
	*mock.Call
}

// GetNotificationsForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *Notification_Expecter) GetNotificationsForUser(ctx interface{}, userID interface{}) *Notification_GetNotificationsForUser_Call {
	return &Notification_GetNotificationsForUser_Call{Call: _e.mock.On("GetNotificationsForUser", ctx, userID)}
}

func (_c *Notification_GetNotificationsForUser_Call) Run(run func(ctx context.Context, userID int64)) *Notification_GetNotificationsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Notification_GetNotificationsForUser_Call) Return(_a0 []model.Notification, _a1 error) *Notification_GetNotificationsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Notification_GetNotificationsForUser_Call) RunAndReturn(run func(context.Context, int64) ([]model.Notification, error)) *Notification_GetNotificationsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReadNotification provides a mock function with given fields: ctx, id
func (_m *Notification) UpdateReadNotification(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReadNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Notification_UpdateReadNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReadNotification'
type Notification_UpdateReadNotification_Call struct {
	*mock.Call
}

// UpdateReadNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Notification_Expecter) UpdateReadNotification(ctx interface{}, id interface{}) *Notification_UpdateReadNotification_Call {
	return &Notification_UpdateReadNotification_Call{Call: _e.mock.On("UpdateReadNotification", ctx, id)}
}

func (_c *Notification_UpdateReadNotification_Call) Run(run func(ctx context.Context, id int64)) *Notification_UpdateReadNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Notification_UpdateReadNotification_Call) Return(_a0 error) *Notification_UpdateReadNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Notification_UpdateReadNotification_Call) RunAndReturn(run func(context.Context, int64) error) *Notification_UpdateReadNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotification creates a new instance of Notification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotification(t interface {
	mock.TestingT
	Cleanup(func())
}) *Notification {
	mock := &Notification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
