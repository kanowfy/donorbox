// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/kanowfy/donorbox/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

type Transaction_Expecter struct {
	mock *mock.Mock
}

func (_m *Transaction) EXPECT() *Transaction_Expecter {
	return &Transaction_Expecter{mock: &_m.Mock}
}

// GetAllTransactions provides a mock function with given fields: ctx
func (_m *Transaction) GetAllTransactions(ctx context.Context) ([]model.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction_GetAllTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactions'
type Transaction_GetAllTransactions_Call struct {
	*mock.Call
}

// GetAllTransactions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Transaction_Expecter) GetAllTransactions(ctx interface{}) *Transaction_GetAllTransactions_Call {
	return &Transaction_GetAllTransactions_Call{Call: _e.mock.On("GetAllTransactions", ctx)}
}

func (_c *Transaction_GetAllTransactions_Call) Run(run func(ctx context.Context)) *Transaction_GetAllTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Transaction_GetAllTransactions_Call) Return(_a0 []model.Transaction, _a1 error) *Transaction_GetAllTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Transaction_GetAllTransactions_Call) RunAndReturn(run func(context.Context) ([]model.Transaction, error)) *Transaction_GetAllTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneTransaction provides a mock function with given fields: ctx, txID
func (_m *Transaction) GetOneTransaction(ctx context.Context, txID uuid.UUID) (*model.Transaction, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetOneTransaction")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Transaction, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Transaction); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction_GetOneTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneTransaction'
type Transaction_GetOneTransaction_Call struct {
	*mock.Call
}

// GetOneTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txID uuid.UUID
func (_e *Transaction_Expecter) GetOneTransaction(ctx interface{}, txID interface{}) *Transaction_GetOneTransaction_Call {
	return &Transaction_GetOneTransaction_Call{Call: _e.mock.On("GetOneTransaction", ctx, txID)}
}

func (_c *Transaction_GetOneTransaction_Call) Run(run func(ctx context.Context, txID uuid.UUID)) *Transaction_GetOneTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Transaction_GetOneTransaction_Call) Return(_a0 *model.Transaction, _a1 error) *Transaction_GetOneTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Transaction_GetOneTransaction_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.Transaction, error)) *Transaction_GetOneTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionAudit provides a mock function with given fields: ctx, projectID
func (_m *Transaction) GetTransactionAudit(ctx context.Context, projectID uuid.UUID) ([]model.Transaction, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionAudit")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Transaction, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Transaction); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction_GetTransactionAudit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionAudit'
type Transaction_GetTransactionAudit_Call struct {
	*mock.Call
}

// GetTransactionAudit is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Transaction_Expecter) GetTransactionAudit(ctx interface{}, projectID interface{}) *Transaction_GetTransactionAudit_Call {
	return &Transaction_GetTransactionAudit_Call{Call: _e.mock.On("GetTransactionAudit", ctx, projectID)}
}

func (_c *Transaction_GetTransactionAudit_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Transaction_GetTransactionAudit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Transaction_GetTransactionAudit_Call) Return(_a0 []model.Transaction, _a1 error) *Transaction_GetTransactionAudit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Transaction_GetTransactionAudit_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]model.Transaction, error)) *Transaction_GetTransactionAudit_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
