// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kanowfy/donorbox/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// Rag is an autogenerated mock type for the Rag type
type Rag struct {
	mock.Mock
}

type Rag_Expecter struct {
	mock *mock.Mock
}

func (_m *Rag) EXPECT() *Rag_Expecter {
	return &Rag_Expecter{mock: &_m.Mock}
}

// AddDocuments provides a mock function with given fields: ctx, req
func (_m *Rag) AddDocuments(ctx context.Context, req dto.AddDocumentRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddDocuments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.AddDocumentRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rag_AddDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDocuments'
type Rag_AddDocuments_Call struct {
	*mock.Call
}

// AddDocuments is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.AddDocumentRequest
func (_e *Rag_Expecter) AddDocuments(ctx interface{}, req interface{}) *Rag_AddDocuments_Call {
	return &Rag_AddDocuments_Call{Call: _e.mock.On("AddDocuments", ctx, req)}
}

func (_c *Rag_AddDocuments_Call) Run(run func(ctx context.Context, req dto.AddDocumentRequest)) *Rag_AddDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.AddDocumentRequest))
	})
	return _c
}

func (_c *Rag_AddDocuments_Call) Return(_a0 error) *Rag_AddDocuments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Rag_AddDocuments_Call) RunAndReturn(run func(context.Context, dto.AddDocumentRequest) error) *Rag_AddDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, req
func (_m *Rag) Query(ctx context.Context, req dto.QueryRequest) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.QueryRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.QueryRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.QueryRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rag_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Rag_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.QueryRequest
func (_e *Rag_Expecter) Query(ctx interface{}, req interface{}) *Rag_Query_Call {
	return &Rag_Query_Call{Call: _e.mock.On("Query", ctx, req)}
}

func (_c *Rag_Query_Call) Run(run func(ctx context.Context, req dto.QueryRequest)) *Rag_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.QueryRequest))
	})
	return _c
}

func (_c *Rag_Query_Call) Return(_a0 string, _a1 error) *Rag_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Rag_Query_Call) RunAndReturn(run func(context.Context, dto.QueryRequest) (string, error)) *Rag_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewRag creates a new instance of Rag. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRag(t interface {
	mock.TestingT
	Cleanup(func())
}) *Rag {
	mock := &Rag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
