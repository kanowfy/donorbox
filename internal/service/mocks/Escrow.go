// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kanowfy/donorbox/internal/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kanowfy/donorbox/internal/model"

	service "github.com/kanowfy/donorbox/internal/service"

	uuid "github.com/google/uuid"
)

// Escrow is an autogenerated mock type for the Escrow type
type Escrow struct {
	mock.Mock
}

type Escrow_Expecter struct {
	mock *mock.Mock
}

func (_m *Escrow) EXPECT() *Escrow_Expecter {
	return &Escrow_Expecter{mock: &_m.Mock}
}

// GetEscrowByID provides a mock function with given fields: ctx, id
func (_m *Escrow) GetEscrowByID(ctx context.Context, id uuid.UUID) (*model.EscrowUser, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEscrowByID")
	}

	var r0 *model.EscrowUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.EscrowUser, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.EscrowUser); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EscrowUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Escrow_GetEscrowByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEscrowByID'
type Escrow_GetEscrowByID_Call struct {
	*mock.Call
}

// GetEscrowByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Escrow_Expecter) GetEscrowByID(ctx interface{}, id interface{}) *Escrow_GetEscrowByID_Call {
	return &Escrow_GetEscrowByID_Call{Call: _e.mock.On("GetEscrowByID", ctx, id)}
}

func (_c *Escrow_GetEscrowByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Escrow_GetEscrowByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Escrow_GetEscrowByID_Call) Return(_a0 *model.EscrowUser, _a1 error) *Escrow_GetEscrowByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Escrow_GetEscrowByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.EscrowUser, error)) *Escrow_GetEscrowByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatistics provides a mock function with given fields: ctx
func (_m *Escrow) GetStatistics(ctx context.Context) (*service.ProjectStatistics, []service.WeeklyTransactions, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 *service.ProjectStatistics
	var r1 []service.WeeklyTransactions
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*service.ProjectStatistics, []service.WeeklyTransactions, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *service.ProjectStatistics); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.ProjectStatistics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) []service.WeeklyTransactions); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]service.WeeklyTransactions)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Escrow_GetStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatistics'
type Escrow_GetStatistics_Call struct {
	*mock.Call
}

// GetStatistics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Escrow_Expecter) GetStatistics(ctx interface{}) *Escrow_GetStatistics_Call {
	return &Escrow_GetStatistics_Call{Call: _e.mock.On("GetStatistics", ctx)}
}

func (_c *Escrow_GetStatistics_Call) Run(run func(ctx context.Context)) *Escrow_GetStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Escrow_GetStatistics_Call) Return(_a0 *service.ProjectStatistics, _a1 []service.WeeklyTransactions, _a2 error) *Escrow_GetStatistics_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Escrow_GetStatistics_Call) RunAndReturn(run func(context.Context) (*service.ProjectStatistics, []service.WeeklyTransactions, error)) *Escrow_GetStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, req
func (_m *Escrow) Login(ctx context.Context, req dto.LoginRequest) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Escrow_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Escrow_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.LoginRequest
func (_e *Escrow_Expecter) Login(ctx interface{}, req interface{}) *Escrow_Login_Call {
	return &Escrow_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *Escrow_Login_Call) Run(run func(ctx context.Context, req dto.LoginRequest)) *Escrow_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.LoginRequest))
	})
	return _c
}

func (_c *Escrow_Login_Call) Return(_a0 string, _a1 error) *Escrow_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Escrow_Login_Call) RunAndReturn(run func(context.Context, dto.LoginRequest) (string, error)) *Escrow_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Payout provides a mock function with given fields: ctx, projectID, escrow
func (_m *Escrow) Payout(ctx context.Context, projectID uuid.UUID, escrow *model.EscrowUser) error {
	ret := _m.Called(ctx, projectID, escrow)

	if len(ret) == 0 {
		panic("no return value specified for Payout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.EscrowUser) error); ok {
		r0 = rf(ctx, projectID, escrow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Escrow_Payout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Payout'
type Escrow_Payout_Call struct {
	*mock.Call
}

// Payout is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
//   - escrow *model.EscrowUser
func (_e *Escrow_Expecter) Payout(ctx interface{}, projectID interface{}, escrow interface{}) *Escrow_Payout_Call {
	return &Escrow_Payout_Call{Call: _e.mock.On("Payout", ctx, projectID, escrow)}
}

func (_c *Escrow_Payout_Call) Run(run func(ctx context.Context, projectID uuid.UUID, escrow *model.EscrowUser)) *Escrow_Payout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.EscrowUser))
	})
	return _c
}

func (_c *Escrow_Payout_Call) Return(_a0 error) *Escrow_Payout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Escrow_Payout_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.EscrowUser) error) *Escrow_Payout_Call {
	_c.Call.Return(run)
	return _c
}

// Refund provides a mock function with given fields: ctx, projectID, escrow
func (_m *Escrow) Refund(ctx context.Context, projectID uuid.UUID, escrow *model.EscrowUser) error {
	ret := _m.Called(ctx, projectID, escrow)

	if len(ret) == 0 {
		panic("no return value specified for Refund")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.EscrowUser) error); ok {
		r0 = rf(ctx, projectID, escrow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Escrow_Refund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refund'
type Escrow_Refund_Call struct {
	*mock.Call
}

// Refund is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
//   - escrow *model.EscrowUser
func (_e *Escrow_Expecter) Refund(ctx interface{}, projectID interface{}, escrow interface{}) *Escrow_Refund_Call {
	return &Escrow_Refund_Call{Call: _e.mock.On("Refund", ctx, projectID, escrow)}
}

func (_c *Escrow_Refund_Call) Run(run func(ctx context.Context, projectID uuid.UUID, escrow *model.EscrowUser)) *Escrow_Refund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.EscrowUser))
	})
	return _c
}

func (_c *Escrow_Refund_Call) Return(_a0 error) *Escrow_Refund_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Escrow_Refund_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.EscrowUser) error) *Escrow_Refund_Call {
	_c.Call.Return(run)
	return _c
}

// NewEscrow creates a new instance of Escrow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEscrow(t interface {
	mock.TestingT
	Cleanup(func())
}) *Escrow {
	mock := &Escrow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
