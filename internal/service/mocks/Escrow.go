// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kanowfy/donorbox/internal/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kanowfy/donorbox/internal/model"
)

// Escrow is an autogenerated mock type for the Escrow type
type Escrow struct {
	mock.Mock
}

type Escrow_Expecter struct {
	mock *mock.Mock
}

func (_m *Escrow) EXPECT() *Escrow_Expecter {
	return &Escrow_Expecter{mock: &_m.Mock}
}

// ApproveOfProject provides a mock function with given fields: ctx, escrowID, req
func (_m *Escrow) ApproveOfProject(ctx context.Context, escrowID int64, req dto.ProjectApprovalRequest) error {
	ret := _m.Called(ctx, escrowID, req)

	if len(ret) == 0 {
		panic("no return value specified for ApproveOfProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.ProjectApprovalRequest) error); ok {
		r0 = rf(ctx, escrowID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Escrow_ApproveOfProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApproveOfProject'
type Escrow_ApproveOfProject_Call struct {
	*mock.Call
}

// ApproveOfProject is a helper method to define mock.On call
//   - ctx context.Context
//   - escrowID int64
//   - req dto.ProjectApprovalRequest
func (_e *Escrow_Expecter) ApproveOfProject(ctx interface{}, escrowID interface{}, req interface{}) *Escrow_ApproveOfProject_Call {
	return &Escrow_ApproveOfProject_Call{Call: _e.mock.On("ApproveOfProject", ctx, escrowID, req)}
}

func (_c *Escrow_ApproveOfProject_Call) Run(run func(ctx context.Context, escrowID int64, req dto.ProjectApprovalRequest)) *Escrow_ApproveOfProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(dto.ProjectApprovalRequest))
	})
	return _c
}

func (_c *Escrow_ApproveOfProject_Call) Return(_a0 error) *Escrow_ApproveOfProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Escrow_ApproveOfProject_Call) RunAndReturn(run func(context.Context, int64, dto.ProjectApprovalRequest) error) *Escrow_ApproveOfProject_Call {
	_c.Call.Return(run)
	return _c
}

// ApproveSpendingProof provides a mock function with given fields: ctx, escrowID, req
func (_m *Escrow) ApproveSpendingProof(ctx context.Context, escrowID int64, req dto.ProofApprovalRequest) error {
	ret := _m.Called(ctx, escrowID, req)

	if len(ret) == 0 {
		panic("no return value specified for ApproveSpendingProof")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.ProofApprovalRequest) error); ok {
		r0 = rf(ctx, escrowID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Escrow_ApproveSpendingProof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApproveSpendingProof'
type Escrow_ApproveSpendingProof_Call struct {
	*mock.Call
}

// ApproveSpendingProof is a helper method to define mock.On call
//   - ctx context.Context
//   - escrowID int64
//   - req dto.ProofApprovalRequest
func (_e *Escrow_Expecter) ApproveSpendingProof(ctx interface{}, escrowID interface{}, req interface{}) *Escrow_ApproveSpendingProof_Call {
	return &Escrow_ApproveSpendingProof_Call{Call: _e.mock.On("ApproveSpendingProof", ctx, escrowID, req)}
}

func (_c *Escrow_ApproveSpendingProof_Call) Run(run func(ctx context.Context, escrowID int64, req dto.ProofApprovalRequest)) *Escrow_ApproveSpendingProof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(dto.ProofApprovalRequest))
	})
	return _c
}

func (_c *Escrow_ApproveSpendingProof_Call) Return(_a0 error) *Escrow_ApproveSpendingProof_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Escrow_ApproveSpendingProof_Call) RunAndReturn(run func(context.Context, int64, dto.ProofApprovalRequest) error) *Escrow_ApproveSpendingProof_Call {
	_c.Call.Return(run)
	return _c
}

// ApproveUserVerification provides a mock function with given fields: ctx, escrowID, req
func (_m *Escrow) ApproveUserVerification(ctx context.Context, escrowID int64, req dto.VerificationApprovalRequest) error {
	ret := _m.Called(ctx, escrowID, req)

	if len(ret) == 0 {
		panic("no return value specified for ApproveUserVerification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.VerificationApprovalRequest) error); ok {
		r0 = rf(ctx, escrowID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Escrow_ApproveUserVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApproveUserVerification'
type Escrow_ApproveUserVerification_Call struct {
	*mock.Call
}

// ApproveUserVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - escrowID int64
//   - req dto.VerificationApprovalRequest
func (_e *Escrow_Expecter) ApproveUserVerification(ctx interface{}, escrowID interface{}, req interface{}) *Escrow_ApproveUserVerification_Call {
	return &Escrow_ApproveUserVerification_Call{Call: _e.mock.On("ApproveUserVerification", ctx, escrowID, req)}
}

func (_c *Escrow_ApproveUserVerification_Call) Run(run func(ctx context.Context, escrowID int64, req dto.VerificationApprovalRequest)) *Escrow_ApproveUserVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(dto.VerificationApprovalRequest))
	})
	return _c
}

func (_c *Escrow_ApproveUserVerification_Call) Return(_a0 error) *Escrow_ApproveUserVerification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Escrow_ApproveUserVerification_Call) RunAndReturn(run func(context.Context, int64, dto.VerificationApprovalRequest) error) *Escrow_ApproveUserVerification_Call {
	_c.Call.Return(run)
	return _c
}

// GetEscrowByID provides a mock function with given fields: ctx, id
func (_m *Escrow) GetEscrowByID(ctx context.Context, id int64) (*model.EscrowUser, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEscrowByID")
	}

	var r0 *model.EscrowUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.EscrowUser, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.EscrowUser); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EscrowUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Escrow_GetEscrowByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEscrowByID'
type Escrow_GetEscrowByID_Call struct {
	*mock.Call
}

// GetEscrowByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Escrow_Expecter) GetEscrowByID(ctx interface{}, id interface{}) *Escrow_GetEscrowByID_Call {
	return &Escrow_GetEscrowByID_Call{Call: _e.mock.On("GetEscrowByID", ctx, id)}
}

func (_c *Escrow_GetEscrowByID_Call) Run(run func(ctx context.Context, id int64)) *Escrow_GetEscrowByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Escrow_GetEscrowByID_Call) Return(_a0 *model.EscrowUser, _a1 error) *Escrow_GetEscrowByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Escrow_GetEscrowByID_Call) RunAndReturn(run func(context.Context, int64) (*model.EscrowUser, error)) *Escrow_GetEscrowByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatistics provides a mock function with given fields: ctx
func (_m *Escrow) GetStatistics(ctx context.Context) (*dto.GetStatisticsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 *dto.GetStatisticsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*dto.GetStatisticsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *dto.GetStatisticsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetStatisticsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Escrow_GetStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatistics'
type Escrow_GetStatistics_Call struct {
	*mock.Call
}

// GetStatistics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Escrow_Expecter) GetStatistics(ctx interface{}) *Escrow_GetStatistics_Call {
	return &Escrow_GetStatistics_Call{Call: _e.mock.On("GetStatistics", ctx)}
}

func (_c *Escrow_GetStatistics_Call) Run(run func(ctx context.Context)) *Escrow_GetStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Escrow_GetStatistics_Call) Return(_a0 *dto.GetStatisticsResponse, _a1 error) *Escrow_GetStatistics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Escrow_GetStatistics_Call) RunAndReturn(run func(context.Context) (*dto.GetStatisticsResponse, error)) *Escrow_GetStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, req
func (_m *Escrow) Login(ctx context.Context, req dto.LoginRequest) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Escrow_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Escrow_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.LoginRequest
func (_e *Escrow_Expecter) Login(ctx interface{}, req interface{}) *Escrow_Login_Call {
	return &Escrow_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *Escrow_Login_Call) Run(run func(ctx context.Context, req dto.LoginRequest)) *Escrow_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.LoginRequest))
	})
	return _c
}

func (_c *Escrow_Login_Call) Return(_a0 string, _a1 error) *Escrow_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Escrow_Login_Call) RunAndReturn(run func(context.Context, dto.LoginRequest) (string, error)) *Escrow_Login_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveMilestone provides a mock function with given fields: ctx, escorwID, milestoneID, req
func (_m *Escrow) ResolveMilestone(ctx context.Context, escorwID int64, milestoneID int64, req dto.ResolveMilestoneRequest) error {
	ret := _m.Called(ctx, escorwID, milestoneID, req)

	if len(ret) == 0 {
		panic("no return value specified for ResolveMilestone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, dto.ResolveMilestoneRequest) error); ok {
		r0 = rf(ctx, escorwID, milestoneID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Escrow_ResolveMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveMilestone'
type Escrow_ResolveMilestone_Call struct {
	*mock.Call
}

// ResolveMilestone is a helper method to define mock.On call
//   - ctx context.Context
//   - escorwID int64
//   - milestoneID int64
//   - req dto.ResolveMilestoneRequest
func (_e *Escrow_Expecter) ResolveMilestone(ctx interface{}, escorwID interface{}, milestoneID interface{}, req interface{}) *Escrow_ResolveMilestone_Call {
	return &Escrow_ResolveMilestone_Call{Call: _e.mock.On("ResolveMilestone", ctx, escorwID, milestoneID, req)}
}

func (_c *Escrow_ResolveMilestone_Call) Run(run func(ctx context.Context, escorwID int64, milestoneID int64, req dto.ResolveMilestoneRequest)) *Escrow_ResolveMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(dto.ResolveMilestoneRequest))
	})
	return _c
}

func (_c *Escrow_ResolveMilestone_Call) Return(_a0 error) *Escrow_ResolveMilestone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Escrow_ResolveMilestone_Call) RunAndReturn(run func(context.Context, int64, int64, dto.ResolveMilestoneRequest) error) *Escrow_ResolveMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// ReviewReport provides a mock function with given fields: ctx, escrowID, req
func (_m *Escrow) ReviewReport(ctx context.Context, escrowID int64, req dto.ReportReviewRequest) error {
	ret := _m.Called(ctx, escrowID, req)

	if len(ret) == 0 {
		panic("no return value specified for ReviewReport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.ReportReviewRequest) error); ok {
		r0 = rf(ctx, escrowID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Escrow_ReviewReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReviewReport'
type Escrow_ReviewReport_Call struct {
	*mock.Call
}

// ReviewReport is a helper method to define mock.On call
//   - ctx context.Context
//   - escrowID int64
//   - req dto.ReportReviewRequest
func (_e *Escrow_Expecter) ReviewReport(ctx interface{}, escrowID interface{}, req interface{}) *Escrow_ReviewReport_Call {
	return &Escrow_ReviewReport_Call{Call: _e.mock.On("ReviewReport", ctx, escrowID, req)}
}

func (_c *Escrow_ReviewReport_Call) Run(run func(ctx context.Context, escrowID int64, req dto.ReportReviewRequest)) *Escrow_ReviewReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(dto.ReportReviewRequest))
	})
	return _c
}

func (_c *Escrow_ReviewReport_Call) Return(_a0 error) *Escrow_ReviewReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Escrow_ReviewReport_Call) RunAndReturn(run func(context.Context, int64, dto.ReportReviewRequest) error) *Escrow_ReviewReport_Call {
	_c.Call.Return(run)
	return _c
}

// NewEscrow creates a new instance of Escrow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEscrow(t interface {
	mock.TestingT
	Cleanup(func())
}) *Escrow {
	mock := &Escrow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
