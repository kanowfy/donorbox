// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kanowfy/donorbox/internal/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kanowfy/donorbox/internal/model"

	uuid "github.com/google/uuid"
)

// Card is an autogenerated mock type for the Card type
type Card struct {
	mock.Mock
}

type Card_Expecter struct {
	mock *mock.Mock
}

func (_m *Card) EXPECT() *Card_Expecter {
	return &Card_Expecter{mock: &_m.Mock}
}

// GetCardByID provides a mock function with given fields: ctx, cardID
func (_m *Card) GetCardByID(ctx context.Context, cardID uuid.UUID) (*model.Card, error) {
	ret := _m.Called(ctx, cardID)

	if len(ret) == 0 {
		panic("no return value specified for GetCardByID")
	}

	var r0 *model.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Card, error)); ok {
		return rf(ctx, cardID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Card); ok {
		r0 = rf(ctx, cardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, cardID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Card_GetCardByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardByID'
type Card_GetCardByID_Call struct {
	*mock.Call
}

// GetCardByID is a helper method to define mock.On call
//   - ctx context.Context
//   - cardID uuid.UUID
func (_e *Card_Expecter) GetCardByID(ctx interface{}, cardID interface{}) *Card_GetCardByID_Call {
	return &Card_GetCardByID_Call{Call: _e.mock.On("GetCardByID", ctx, cardID)}
}

func (_c *Card_GetCardByID_Call) Run(run func(ctx context.Context, cardID uuid.UUID)) *Card_GetCardByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Card_GetCardByID_Call) Return(_a0 *model.Card, _a1 error) *Card_GetCardByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Card_GetCardByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.Card, error)) *Card_GetCardByID_Call {
	_c.Call.Return(run)
	return _c
}

// RequestCardToken provides a mock function with given fields: ctx, cardInfo
func (_m *Card) RequestCardToken(ctx context.Context, cardInfo dto.CardInformation) (*model.Card, error) {
	ret := _m.Called(ctx, cardInfo)

	if len(ret) == 0 {
		panic("no return value specified for RequestCardToken")
	}

	var r0 *model.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CardInformation) (*model.Card, error)); ok {
		return rf(ctx, cardInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CardInformation) *model.Card); ok {
		r0 = rf(ctx, cardInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CardInformation) error); ok {
		r1 = rf(ctx, cardInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Card_RequestCardToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestCardToken'
type Card_RequestCardToken_Call struct {
	*mock.Call
}

// RequestCardToken is a helper method to define mock.On call
//   - ctx context.Context
//   - cardInfo dto.CardInformation
func (_e *Card_Expecter) RequestCardToken(ctx interface{}, cardInfo interface{}) *Card_RequestCardToken_Call {
	return &Card_RequestCardToken_Call{Call: _e.mock.On("RequestCardToken", ctx, cardInfo)}
}

func (_c *Card_RequestCardToken_Call) Run(run func(ctx context.Context, cardInfo dto.CardInformation)) *Card_RequestCardToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CardInformation))
	})
	return _c
}

func (_c *Card_RequestCardToken_Call) Return(_a0 *model.Card, _a1 error) *Card_RequestCardToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Card_RequestCardToken_Call) RunAndReturn(run func(context.Context, dto.CardInformation) (*model.Card, error)) *Card_RequestCardToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetupEscrowCard provides a mock function with given fields: ctx, escrowID, cardInfo
func (_m *Card) SetupEscrowCard(ctx context.Context, escrowID uuid.UUID, cardInfo dto.CardInformation) error {
	ret := _m.Called(ctx, escrowID, cardInfo)

	if len(ret) == 0 {
		panic("no return value specified for SetupEscrowCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.CardInformation) error); ok {
		r0 = rf(ctx, escrowID, cardInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Card_SetupEscrowCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupEscrowCard'
type Card_SetupEscrowCard_Call struct {
	*mock.Call
}

// SetupEscrowCard is a helper method to define mock.On call
//   - ctx context.Context
//   - escrowID uuid.UUID
//   - cardInfo dto.CardInformation
func (_e *Card_Expecter) SetupEscrowCard(ctx interface{}, escrowID interface{}, cardInfo interface{}) *Card_SetupEscrowCard_Call {
	return &Card_SetupEscrowCard_Call{Call: _e.mock.On("SetupEscrowCard", ctx, escrowID, cardInfo)}
}

func (_c *Card_SetupEscrowCard_Call) Run(run func(ctx context.Context, escrowID uuid.UUID, cardInfo dto.CardInformation)) *Card_SetupEscrowCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.CardInformation))
	})
	return _c
}

func (_c *Card_SetupEscrowCard_Call) Return(_a0 error) *Card_SetupEscrowCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Card_SetupEscrowCard_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.CardInformation) error) *Card_SetupEscrowCard_Call {
	_c.Call.Return(run)
	return _c
}

// SetupProjectCard provides a mock function with given fields: ctx, projectID, cardInfo
func (_m *Card) SetupProjectCard(ctx context.Context, projectID uuid.UUID, cardInfo dto.CardInformation) error {
	ret := _m.Called(ctx, projectID, cardInfo)

	if len(ret) == 0 {
		panic("no return value specified for SetupProjectCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.CardInformation) error); ok {
		r0 = rf(ctx, projectID, cardInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Card_SetupProjectCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupProjectCard'
type Card_SetupProjectCard_Call struct {
	*mock.Call
}

// SetupProjectCard is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
//   - cardInfo dto.CardInformation
func (_e *Card_Expecter) SetupProjectCard(ctx interface{}, projectID interface{}, cardInfo interface{}) *Card_SetupProjectCard_Call {
	return &Card_SetupProjectCard_Call{Call: _e.mock.On("SetupProjectCard", ctx, projectID, cardInfo)}
}

func (_c *Card_SetupProjectCard_Call) Run(run func(ctx context.Context, projectID uuid.UUID, cardInfo dto.CardInformation)) *Card_SetupProjectCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.CardInformation))
	})
	return _c
}

func (_c *Card_SetupProjectCard_Call) Return(_a0 error) *Card_SetupProjectCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Card_SetupProjectCard_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.CardInformation) error) *Card_SetupProjectCard_Call {
	_c.Call.Return(run)
	return _c
}

// NewCard creates a new instance of Card. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCard(t interface {
	mock.TestingT
	Cleanup(func())
}) *Card {
	mock := &Card{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
