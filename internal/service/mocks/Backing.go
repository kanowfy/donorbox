// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kanowfy/donorbox/internal/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kanowfy/donorbox/internal/model"

	service "github.com/kanowfy/donorbox/internal/service"

	uuid "github.com/google/uuid"
)

// Backing is an autogenerated mock type for the Backing type
type Backing struct {
	mock.Mock
}

type Backing_Expecter struct {
	mock *mock.Mock
}

func (_m *Backing) EXPECT() *Backing_Expecter {
	return &Backing_Expecter{mock: &_m.Mock}
}

// AcceptBacking provides a mock function with given fields: ctx, projectID, req
func (_m *Backing) AcceptBacking(ctx context.Context, projectID uuid.UUID, req dto.BackingRequest) error {
	ret := _m.Called(ctx, projectID, req)

	if len(ret) == 0 {
		panic("no return value specified for AcceptBacking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.BackingRequest) error); ok {
		r0 = rf(ctx, projectID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backing_AcceptBacking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptBacking'
type Backing_AcceptBacking_Call struct {
	*mock.Call
}

// AcceptBacking is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
//   - req dto.BackingRequest
func (_e *Backing_Expecter) AcceptBacking(ctx interface{}, projectID interface{}, req interface{}) *Backing_AcceptBacking_Call {
	return &Backing_AcceptBacking_Call{Call: _e.mock.On("AcceptBacking", ctx, projectID, req)}
}

func (_c *Backing_AcceptBacking_Call) Run(run func(ctx context.Context, projectID uuid.UUID, req dto.BackingRequest)) *Backing_AcceptBacking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.BackingRequest))
	})
	return _c
}

func (_c *Backing_AcceptBacking_Call) Return(_a0 error) *Backing_AcceptBacking_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backing_AcceptBacking_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.BackingRequest) error) *Backing_AcceptBacking_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackingsForProject provides a mock function with given fields: ctx, projectID
func (_m *Backing) GetBackingsForProject(ctx context.Context, projectID uuid.UUID) ([]model.Backing, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetBackingsForProject")
	}

	var r0 []model.Backing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Backing, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Backing); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Backing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backing_GetBackingsForProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackingsForProject'
type Backing_GetBackingsForProject_Call struct {
	*mock.Call
}

// GetBackingsForProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Backing_Expecter) GetBackingsForProject(ctx interface{}, projectID interface{}) *Backing_GetBackingsForProject_Call {
	return &Backing_GetBackingsForProject_Call{Call: _e.mock.On("GetBackingsForProject", ctx, projectID)}
}

func (_c *Backing_GetBackingsForProject_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Backing_GetBackingsForProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Backing_GetBackingsForProject_Call) Return(_a0 []model.Backing, _a1 error) *Backing_GetBackingsForProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backing_GetBackingsForProject_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]model.Backing, error)) *Backing_GetBackingsForProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectBackingAggregation provides a mock function with given fields: ctx, projectID
func (_m *Backing) GetProjectBackingAggregation(ctx context.Context, projectID uuid.UUID) (*service.BackingAggregation, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectBackingAggregation")
	}

	var r0 *service.BackingAggregation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*service.BackingAggregation, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *service.BackingAggregation); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.BackingAggregation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backing_GetProjectBackingAggregation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectBackingAggregation'
type Backing_GetProjectBackingAggregation_Call struct {
	*mock.Call
}

// GetProjectBackingAggregation is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Backing_Expecter) GetProjectBackingAggregation(ctx interface{}, projectID interface{}) *Backing_GetProjectBackingAggregation_Call {
	return &Backing_GetProjectBackingAggregation_Call{Call: _e.mock.On("GetProjectBackingAggregation", ctx, projectID)}
}

func (_c *Backing_GetProjectBackingAggregation_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Backing_GetProjectBackingAggregation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Backing_GetProjectBackingAggregation_Call) Return(_a0 *service.BackingAggregation, _a1 error) *Backing_GetProjectBackingAggregation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backing_GetProjectBackingAggregation_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*service.BackingAggregation, error)) *Backing_GetProjectBackingAggregation_Call {
	_c.Call.Return(run)
	return _c
}

// NewBacking creates a new instance of Backing. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBacking(t interface {
	mock.TestingT
	Cleanup(func())
}) *Backing {
	mock := &Backing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
