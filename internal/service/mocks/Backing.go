// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kanowfy/donorbox/internal/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kanowfy/donorbox/internal/model"
)

// Backing is an autogenerated mock type for the Backing type
type Backing struct {
	mock.Mock
}

type Backing_Expecter struct {
	mock *mock.Mock
}

func (_m *Backing) EXPECT() *Backing_Expecter {
	return &Backing_Expecter{mock: &_m.Mock}
}

// CreateBacking provides a mock function with given fields: ctx, projectID, req
func (_m *Backing) CreateBacking(ctx context.Context, projectID int64, req dto.BackingRequest) error {
	ret := _m.Called(ctx, projectID, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateBacking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.BackingRequest) error); ok {
		r0 = rf(ctx, projectID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backing_CreateBacking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBacking'
type Backing_CreateBacking_Call struct {
	*mock.Call
}

// CreateBacking is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID int64
//   - req dto.BackingRequest
func (_e *Backing_Expecter) CreateBacking(ctx interface{}, projectID interface{}, req interface{}) *Backing_CreateBacking_Call {
	return &Backing_CreateBacking_Call{Call: _e.mock.On("CreateBacking", ctx, projectID, req)}
}

func (_c *Backing_CreateBacking_Call) Run(run func(ctx context.Context, projectID int64, req dto.BackingRequest)) *Backing_CreateBacking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(dto.BackingRequest))
	})
	return _c
}

func (_c *Backing_CreateBacking_Call) Return(_a0 error) *Backing_CreateBacking_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backing_CreateBacking_Call) RunAndReturn(run func(context.Context, int64, dto.BackingRequest) error) *Backing_CreateBacking_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackingsForProject provides a mock function with given fields: ctx, projectID
func (_m *Backing) GetBackingsForProject(ctx context.Context, projectID int64) ([]model.Backing, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetBackingsForProject")
	}

	var r0 []model.Backing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]model.Backing, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Backing); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Backing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backing_GetBackingsForProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackingsForProject'
type Backing_GetBackingsForProject_Call struct {
	*mock.Call
}

// GetBackingsForProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID int64
func (_e *Backing_Expecter) GetBackingsForProject(ctx interface{}, projectID interface{}) *Backing_GetBackingsForProject_Call {
	return &Backing_GetBackingsForProject_Call{Call: _e.mock.On("GetBackingsForProject", ctx, projectID)}
}

func (_c *Backing_GetBackingsForProject_Call) Run(run func(ctx context.Context, projectID int64)) *Backing_GetBackingsForProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Backing_GetBackingsForProject_Call) Return(_a0 []model.Backing, _a1 error) *Backing_GetBackingsForProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backing_GetBackingsForProject_Call) RunAndReturn(run func(context.Context, int64) ([]model.Backing, error)) *Backing_GetBackingsForProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectBackingStats provides a mock function with given fields: ctx, projectID
func (_m *Backing) GetProjectBackingStats(ctx context.Context, projectID int64) (*model.Backing, *model.Backing, *model.Backing, int64, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectBackingStats")
	}

	var r0 *model.Backing
	var r1 *model.Backing
	var r2 *model.Backing
	var r3 int64
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Backing, *model.Backing, *model.Backing, int64, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Backing); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Backing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) *model.Backing); ok {
		r1 = rf(ctx, projectID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Backing)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) *model.Backing); ok {
		r2 = rf(ctx, projectID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*model.Backing)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, int64) int64); ok {
		r3 = rf(ctx, projectID)
	} else {
		r3 = ret.Get(3).(int64)
	}

	if rf, ok := ret.Get(4).(func(context.Context, int64) error); ok {
		r4 = rf(ctx, projectID)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// Backing_GetProjectBackingStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectBackingStats'
type Backing_GetProjectBackingStats_Call struct {
	*mock.Call
}

// GetProjectBackingStats is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID int64
func (_e *Backing_Expecter) GetProjectBackingStats(ctx interface{}, projectID interface{}) *Backing_GetProjectBackingStats_Call {
	return &Backing_GetProjectBackingStats_Call{Call: _e.mock.On("GetProjectBackingStats", ctx, projectID)}
}

func (_c *Backing_GetProjectBackingStats_Call) Run(run func(ctx context.Context, projectID int64)) *Backing_GetProjectBackingStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Backing_GetProjectBackingStats_Call) Return(_a0 *model.Backing, _a1 *model.Backing, _a2 *model.Backing, _a3 int64, _a4 error) *Backing_GetProjectBackingStats_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3, _a4)
	return _c
}

func (_c *Backing_GetProjectBackingStats_Call) RunAndReturn(run func(context.Context, int64) (*model.Backing, *model.Backing, *model.Backing, int64, error)) *Backing_GetProjectBackingStats_Call {
	_c.Call.Return(run)
	return _c
}

// NewBacking creates a new instance of Backing. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBacking(t interface {
	mock.TestingT
	Cleanup(func())
}) *Backing {
	mock := &Backing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
