// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kanowfy/donorbox/internal/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/kanowfy/donorbox/internal/model"

	uuid "github.com/google/uuid"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

type User_Expecter struct {
	mock *mock.Mock
}

func (_m *User) EXPECT() *User_Expecter {
	return &User_Expecter{mock: &_m.Mock}
}

// ChangePassword provides a mock function with given fields: ctx, userID, req
func (_m *User) ChangePassword(ctx context.Context, userID uuid.UUID, req dto.ChangePasswordRequest) error {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.ChangePasswordRequest) error); ok {
		r0 = rf(ctx, userID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type User_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - req dto.ChangePasswordRequest
func (_e *User_Expecter) ChangePassword(ctx interface{}, userID interface{}, req interface{}) *User_ChangePassword_Call {
	return &User_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, userID, req)}
}

func (_c *User_ChangePassword_Call) Run(run func(ctx context.Context, userID uuid.UUID, req dto.ChangePasswordRequest)) *User_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.ChangePasswordRequest))
	})
	return _c
}

func (_c *User_ChangePassword_Call) Return(_a0 error) *User_ChangePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *User_ChangePassword_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.ChangePasswordRequest) error) *User_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// ConfirmResolvedMilestone provides a mock function with given fields: ctx, milestoneID
func (_m *User) ConfirmResolvedMilestone(ctx context.Context, milestoneID uuid.UUID) error {
	ret := _m.Called(ctx, milestoneID)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmResolvedMilestone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, milestoneID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User_ConfirmResolvedMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmResolvedMilestone'
type User_ConfirmResolvedMilestone_Call struct {
	*mock.Call
}

// ConfirmResolvedMilestone is a helper method to define mock.On call
//   - ctx context.Context
//   - milestoneID uuid.UUID
func (_e *User_Expecter) ConfirmResolvedMilestone(ctx interface{}, milestoneID interface{}) *User_ConfirmResolvedMilestone_Call {
	return &User_ConfirmResolvedMilestone_Call{Call: _e.mock.On("ConfirmResolvedMilestone", ctx, milestoneID)}
}

func (_c *User_ConfirmResolvedMilestone_Call) Run(run func(ctx context.Context, milestoneID uuid.UUID)) *User_ConfirmResolvedMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *User_ConfirmResolvedMilestone_Call) Return(_a0 error) *User_ConfirmResolvedMilestone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *User_ConfirmResolvedMilestone_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *User_ConfirmResolvedMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *User) GetUserByID(ctx context.Context, userID uuid.UUID) (*model.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type User_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *User_Expecter) GetUserByID(ctx interface{}, userID interface{}) *User_GetUserByID_Call {
	return &User_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *User_GetUserByID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *User_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *User_GetUserByID_Call) Return(_a0 *model.User, _a1 error) *User_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.User, error)) *User_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function with given fields: ctx, user, req
func (_m *User) UpdateAccount(ctx context.Context, user *model.User, req dto.UpdateAccountRequest) error {
	ret := _m.Called(ctx, user, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, dto.UpdateAccountRequest) error); ok {
		r0 = rf(ctx, user, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type User_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
//   - req dto.UpdateAccountRequest
func (_e *User_Expecter) UpdateAccount(ctx interface{}, user interface{}, req interface{}) *User_UpdateAccount_Call {
	return &User_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", ctx, user, req)}
}

func (_c *User_UpdateAccount_Call) Run(run func(ctx context.Context, user *model.User, req dto.UpdateAccountRequest)) *User_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User), args[2].(dto.UpdateAccountRequest))
	})
	return _c
}

func (_c *User_UpdateAccount_Call) Return(_a0 error) *User_UpdateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *User_UpdateAccount_Call) RunAndReturn(run func(context.Context, *model.User, dto.UpdateAccountRequest) error) *User_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
