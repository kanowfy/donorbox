// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BackingStatus string

const (
	BackingStatusPending  BackingStatus = "pending"
	BackingStatusReleased BackingStatus = "released"
	BackingStatusRefunded BackingStatus = "refunded"
)

func (e *BackingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BackingStatus(s)
	case string:
		*e = BackingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BackingStatus: %T", src)
	}
	return nil
}

type NullBackingStatus struct {
	BackingStatus BackingStatus `json:"backing_status"`
	Valid         bool          `json:"valid"` // Valid is true if BackingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBackingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BackingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BackingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBackingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BackingStatus), nil
}

type UserType string

const (
	UserTypeRegular UserType = "regular"
	UserTypeEscrow  UserType = "escrow"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType `json:"user_type"`
	Valid    bool     `json:"valid"` // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Backing struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	BackerID    pgtype.UUID        `json:"backer_id"`
	Amount      pgtype.Numeric     `json:"amount"`
	BackingDate pgtype.Timestamptz `json:"backing_date"`
	Status      BackingStatus      `json:"status"`
}

type Category struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type Project struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	CategoryID    int32              `json:"category_id"`
	Title         string             `json:"title"`
	Description   string             `json:"description"`
	CoverPicture  string             `json:"cover_picture"`
	GoalAmount    pgtype.Numeric     `json:"goal_amount"`
	CurrentAmount pgtype.Numeric     `json:"current_amount"`
	Country       string             `json:"country"`
	Province      string             `json:"province"`
	StartDate     pgtype.Timestamptz `json:"start_date"`
	EndDate       pgtype.Timestamptz `json:"end_date"`
	IsActive      bool               `json:"is_active"`
}

type ProjectComment struct {
	ID              pgtype.UUID        `json:"id"`
	ProjectID       pgtype.UUID        `json:"project_id"`
	BackerID        pgtype.UUID        `json:"backer_id"`
	ParentCommentID pgtype.UUID        `json:"parent_comment_id"`
	Content         string             `json:"content"`
	CommentedAt     pgtype.Timestamptz `json:"commented_at"`
}

type ProjectUpdate struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	Description string             `json:"description"`
	UpdateDate  pgtype.Timestamptz `json:"update_date"`
}

type User struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	HashedPassword string             `json:"hashed_password"`
	FirstName      string             `json:"first_name"`
	LastName       string             `json:"last_name"`
	ProfilePicture pgtype.Text        `json:"profile_picture"`
	Activated      bool               `json:"activated"`
	UserType       UserType           `json:"user_type"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}
