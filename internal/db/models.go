// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BackingStatus string

const (
	BackingStatusPending  BackingStatus = "pending"
	BackingStatusReleased BackingStatus = "released"
	BackingStatusRefunded BackingStatus = "refunded"
)

func (e *BackingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BackingStatus(s)
	case string:
		*e = BackingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BackingStatus: %T", src)
	}
	return nil
}

type NullBackingStatus struct {
	BackingStatus BackingStatus
	Valid         bool // Valid is true if BackingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBackingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BackingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BackingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBackingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BackingStatus), nil
}

type UserType string

const (
	UserTypeRegular UserType = "regular"
	UserTypeEscrow  UserType = "escrow"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Backing struct {
	ID          pgtype.UUID
	ProjectID   pgtype.UUID
	BackerID    pgtype.UUID
	Amount      pgtype.Numeric
	BackingDate pgtype.Timestamptz
	Status      BackingStatus
}

type Category struct {
	ID   int32
	Name string
}

type Project struct {
	ID            pgtype.UUID
	UserID        pgtype.UUID
	CategoryID    int32
	Title         string
	Description   string
	CoverPicture  string
	GoalAmount    pgtype.Numeric
	CurrentAmount pgtype.Numeric
	Country       string
	Province      string
	StartDate     pgtype.Timestamptz
	EndDate       pgtype.Timestamptz
	IsActive      bool
}

type ProjectComment struct {
	ID              pgtype.UUID
	ProjectID       pgtype.UUID
	BackerID        pgtype.UUID
	ParentCommentID pgtype.UUID
	Content         string
	CommentedAt     pgtype.Timestamptz
}

type ProjectUpdate struct {
	ID          pgtype.UUID
	ProjectID   pgtype.UUID
	Description string
	UpdateDate  pgtype.Timestamptz
}

type User struct {
	ID             pgtype.UUID
	Email          string
	HashedPassword string
	FirstName      string
	LastName       string
	ProfilePicture pgtype.Text
	Activated      bool
	UserType       UserType
	CreatedAt      pgtype.Timestamptz
}
