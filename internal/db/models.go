// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BackingStatus string

const (
	BackingStatusPending  BackingStatus = "pending"
	BackingStatusReleased BackingStatus = "released"
	BackingStatusRefunded BackingStatus = "refunded"
)

func (e *BackingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BackingStatus(s)
	case string:
		*e = BackingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BackingStatus: %T", src)
	}
	return nil
}

type NullBackingStatus struct {
	BackingStatus BackingStatus `json:"backing_status"`
	Valid         bool          `json:"valid"` // Valid is true if BackingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBackingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BackingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BackingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBackingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BackingStatus), nil
}

type CardBrand string

const (
	CardBrandVISA       CardBrand = "VISA"
	CardBrandMASTERCARD CardBrand = "MASTERCARD"
)

func (e *CardBrand) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CardBrand(s)
	case string:
		*e = CardBrand(s)
	default:
		return fmt.Errorf("unsupported scan type for CardBrand: %T", src)
	}
	return nil
}

type NullCardBrand struct {
	CardBrand CardBrand `json:"card_brand"`
	Valid     bool      `json:"valid"` // Valid is true if CardBrand is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardBrand) Scan(value interface{}) error {
	if value == nil {
		ns.CardBrand, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CardBrand.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardBrand) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CardBrand), nil
}

type ProjectStatus string

const (
	ProjectStatusOngoing         ProjectStatus = "ongoing"
	ProjectStatusEnded           ProjectStatus = "ended"
	ProjectStatusCompletedPayout ProjectStatus = "completed_payout"
	ProjectStatusCompletedRefund ProjectStatus = "completed_refund"
)

func (e *ProjectStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProjectStatus(s)
	case string:
		*e = ProjectStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProjectStatus: %T", src)
	}
	return nil
}

type NullProjectStatus struct {
	ProjectStatus ProjectStatus `json:"project_status"`
	Valid         bool          `json:"valid"` // Valid is true if ProjectStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProjectStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProjectStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProjectStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProjectStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProjectStatus), nil
}

type TransactionStatus string

const (
	TransactionStatusPending   TransactionStatus = "pending"
	TransactionStatusCompleted TransactionStatus = "completed"
	TransactionStatusFailed    TransactionStatus = "failed"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus `json:"transaction_status"`
	Valid             bool              `json:"valid"` // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type TransactionType string

const (
	TransactionTypeBacking TransactionType = "backing"
	TransactionTypePayout  TransactionType = "payout"
	TransactionTypeRefund  TransactionType = "refund"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType `json:"transaction_type"`
	Valid           bool            `json:"valid"` // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type UserType string

const (
	UserTypeRegular UserType = "regular"
	UserTypeEscrow  UserType = "escrow"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType `json:"user_type"`
	Valid    bool     `json:"valid"` // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Backing struct {
	ID            pgtype.UUID        `json:"id"`
	ProjectID     pgtype.UUID        `json:"project_id"`
	BackerID      pgtype.UUID        `json:"backer_id"`
	Amount        int64              `json:"amount"`
	WordOfSupport *string            `json:"word_of_support"`
	Status        BackingStatus      `json:"status"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
}

type Card struct {
	ID             pgtype.UUID        `json:"id"`
	Token          string             `json:"token"`
	CardOwnerName  string             `json:"card_owner_name"`
	LastFourDigits string             `json:"last_four_digits"`
	Brand          CardBrand          `json:"brand"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

type Category struct {
	ID           int32  `json:"id"`
	Name         string `json:"name"`
	Description  string `json:"description"`
	CoverPicture string `json:"cover_picture"`
}

type EscrowUser struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	HashedPassword string             `json:"hashed_password"`
	UserType       UserType           `json:"user_type"`
	CardID         pgtype.UUID        `json:"card_id"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

type Project struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	CategoryID    int32              `json:"category_id"`
	Title         string             `json:"title"`
	Description   string             `json:"description"`
	CoverPicture  string             `json:"cover_picture"`
	GoalAmount    int64              `json:"goal_amount"`
	CurrentAmount int64              `json:"current_amount"`
	Country       string             `json:"country"`
	Province      string             `json:"province"`
	CardID        pgtype.UUID        `json:"card_id"`
	StartDate     pgtype.Timestamptz `json:"start_date"`
	EndDate       pgtype.Timestamptz `json:"end_date"`
	Status        ProjectStatus      `json:"status"`
}

type ProjectUpdate struct {
	ID          pgtype.UUID        `json:"id"`
	ProjectID   pgtype.UUID        `json:"project_id"`
	Description string             `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type Transaction struct {
	ID              pgtype.UUID        `json:"id"`
	ProjectID       pgtype.UUID        `json:"project_id"`
	TransactionType TransactionType    `json:"transaction_type"`
	Amount          int64              `json:"amount"`
	InitiatorCardID pgtype.UUID        `json:"initiator_card_id"`
	RecipientCardID pgtype.UUID        `json:"recipient_card_id"`
	Status          TransactionStatus  `json:"status"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	HashedPassword string             `json:"hashed_password"`
	FirstName      string             `json:"first_name"`
	LastName       string             `json:"last_name"`
	ProfilePicture *string            `json:"profile_picture"`
	Activated      bool               `json:"activated"`
	UserType       UserType           `json:"user_type"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}
