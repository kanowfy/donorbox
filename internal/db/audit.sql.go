// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: audit.sql

package db

import (
	"context"
)

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO audit_trails (
    user_id, escrow_id, entity_type, entity_id, operation_type, field_name, old_value, new_value
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, user_id, escrow_id, entity_type, entity_id, operation_type, field_name, old_value, new_value, created_at
`

type CreateAuditLogParams struct {
	UserID        *int64
	EscrowID      *int64
	EntityType    string
	EntityID      *int64
	OperationType string
	FieldName     string
	OldValue      []byte
	NewValue      []byte
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditTrail, error) {
	row := q.db.QueryRow(ctx, createAuditLog,
		arg.UserID,
		arg.EscrowID,
		arg.EntityType,
		arg.EntityID,
		arg.OperationType,
		arg.FieldName,
		arg.OldValue,
		arg.NewValue,
	)
	var i AuditTrail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EscrowID,
		&i.EntityType,
		&i.EntityID,
		&i.OperationType,
		&i.FieldName,
		&i.OldValue,
		&i.NewValue,
		&i.CreatedAt,
	)
	return i, err
}

const getAuditHistory = `-- name: GetAuditHistory :many
SELECT id, user_id, escrow_id, entity_type, entity_id, operation_type, field_name, old_value, new_value, created_at FROM audit_trails
ORDER BY created_at DESC
`

func (q *Queries) GetAuditHistory(ctx context.Context) ([]AuditTrail, error) {
	rows, err := q.db.Query(ctx, getAuditHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditTrail
	for rows.Next() {
		var i AuditTrail
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EscrowID,
			&i.EntityType,
			&i.EntityID,
			&i.OperationType,
			&i.FieldName,
			&i.OldValue,
			&i.NewValue,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
