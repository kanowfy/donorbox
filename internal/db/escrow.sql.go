// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: escrow.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getEscrowUser = `-- name: GetEscrowUser :one
SELECT id, email, hashed_password, user_type, card_id, created_at FROM escrow_users
LIMIT 1
`

func (q *Queries) GetEscrowUser(ctx context.Context) (EscrowUser, error) {
	row := q.db.QueryRow(ctx, getEscrowUser)
	var i EscrowUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.UserType,
		&i.CardID,
		&i.CreatedAt,
	)
	return i, err
}

const getEscrowUserByEmail = `-- name: GetEscrowUserByEmail :one
SELECT id, email, hashed_password, user_type, card_id, created_at FROM escrow_users
WHERE email = $1
`

func (q *Queries) GetEscrowUserByEmail(ctx context.Context, email string) (EscrowUser, error) {
	row := q.db.QueryRow(ctx, getEscrowUserByEmail, email)
	var i EscrowUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.UserType,
		&i.CardID,
		&i.CreatedAt,
	)
	return i, err
}

const getEscrowUserByID = `-- name: GetEscrowUserByID :one
SELECT id, email, hashed_password, user_type, card_id, created_at FROM escrow_users
WHERE id = $1
`

func (q *Queries) GetEscrowUserByID(ctx context.Context, id uuid.UUID) (EscrowUser, error) {
	row := q.db.QueryRow(ctx, getEscrowUserByID, id)
	var i EscrowUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.UserType,
		&i.CardID,
		&i.CreatedAt,
	)
	return i, err
}

const updateEscrowCard = `-- name: UpdateEscrowCard :exec
UPDATE escrow_users SET card_id = $2
WHERE id = $1
`

type UpdateEscrowCardParams struct {
	ID     uuid.UUID
	CardID uuid.UUID
}

func (q *Queries) UpdateEscrowCard(ctx context.Context, arg UpdateEscrowCardParams) error {
	_, err := q.db.Exec(ctx, updateEscrowCard, arg.ID, arg.CardID)
	return err
}

const updateEscrowUserByID = `-- name: UpdateEscrowUserByID :exec
UPDATE escrow_users SET email = $2, hashed_password = $3
WHERE id = $1
`

type UpdateEscrowUserByIDParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
}

func (q *Queries) UpdateEscrowUserByID(ctx context.Context, arg UpdateEscrowUserByIDParams) error {
	_, err := q.db.Exec(ctx, updateEscrowUserByID, arg.ID, arg.Email, arg.HashedPassword)
	return err
}
