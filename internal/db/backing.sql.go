// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: backing.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBacking = `-- name: CreateBacking :one
INSERT INTO backings (
    project_id, backer_id, amount, word_of_support
) VALUES (
    $1, $2, $3, $4
) 
RETURNING id, project_id, backer_id, amount, word_of_support, status, created_at
`

type CreateBackingParams struct {
	ProjectID     uuid.UUID
	BackerID      uuid.UUID
	Amount        int64
	WordOfSupport *string
}

func (q *Queries) CreateBacking(ctx context.Context, arg CreateBackingParams) (Backing, error) {
	row := q.db.QueryRow(ctx, createBacking,
		arg.ProjectID,
		arg.BackerID,
		arg.Amount,
		arg.WordOfSupport,
	)
	var i Backing
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BackerID,
		&i.Amount,
		&i.WordOfSupport,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getBackingByID = `-- name: GetBackingByID :one
SELECT id, project_id, backer_id, amount, word_of_support, status, created_at FROM backings
WHERE id = $1
`

func (q *Queries) GetBackingByID(ctx context.Context, id uuid.UUID) (Backing, error) {
	row := q.db.QueryRow(ctx, getBackingByID, id)
	var i Backing
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BackerID,
		&i.Amount,
		&i.WordOfSupport,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getBackingCountForProject = `-- name: GetBackingCountForProject :one
SELECT COUNT(*) AS backing_count
FROM backings
WHERE project_id = $1
`

func (q *Queries) GetBackingCountForProject(ctx context.Context, projectID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getBackingCountForProject, projectID)
	var backing_count int64
	err := row.Scan(&backing_count)
	return backing_count, err
}

const getBackingsForProject = `-- name: GetBackingsForProject :many
SELECT backings.id, backings.project_id, backings.backer_id, backings.amount, backings.word_of_support, backings.status, backings.created_at, users.first_name, users.last_name, users.profile_picture
FROM backings
LEFT JOIN users
ON backings.backer_id = users.id
WHERE project_id = $1
ORDER BY backings.created_at DESC
`

type GetBackingsForProjectRow struct {
	ID             uuid.UUID
	ProjectID      uuid.UUID
	BackerID       uuid.UUID
	Amount         int64
	WordOfSupport  *string
	Status         BackingStatus
	CreatedAt      time.Time
	FirstName      *string
	LastName       *string
	ProfilePicture *string
}

func (q *Queries) GetBackingsForProject(ctx context.Context, projectID uuid.UUID) ([]GetBackingsForProjectRow, error) {
	rows, err := q.db.Query(ctx, getBackingsForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBackingsForProjectRow
	for rows.Next() {
		var i GetBackingsForProjectRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.BackerID,
			&i.Amount,
			&i.WordOfSupport,
			&i.Status,
			&i.CreatedAt,
			&i.FirstName,
			&i.LastName,
			&i.ProfilePicture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBackingsForUser = `-- name: GetBackingsForUser :many
SELECT id, project_id, backer_id, amount, word_of_support, status, created_at FROM backings
WHERE backer_id = $1
`

func (q *Queries) GetBackingsForUser(ctx context.Context, backerID uuid.UUID) ([]Backing, error) {
	rows, err := q.db.Query(ctx, getBackingsForUser, backerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Backing
	for rows.Next() {
		var i Backing
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.BackerID,
			&i.Amount,
			&i.WordOfSupport,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFirstBackingDonor = `-- name: GetFirstBackingDonor :one
SELECT backings.id, backings.project_id, backings.backer_id, backings.amount, backings.word_of_support, backings.status, backings.created_at, users.first_name, users.last_name, users.profile_picture
FROM backings
LEFT JOIN users
ON backings.backer_id = users.id
WHERE project_id = $1
ORDER BY backings.created_at
LIMIT 1
`

type GetFirstBackingDonorRow struct {
	ID             uuid.UUID
	ProjectID      uuid.UUID
	BackerID       uuid.UUID
	Amount         int64
	WordOfSupport  *string
	Status         BackingStatus
	CreatedAt      time.Time
	FirstName      *string
	LastName       *string
	ProfilePicture *string
}

func (q *Queries) GetFirstBackingDonor(ctx context.Context, projectID uuid.UUID) (GetFirstBackingDonorRow, error) {
	row := q.db.QueryRow(ctx, getFirstBackingDonor, projectID)
	var i GetFirstBackingDonorRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BackerID,
		&i.Amount,
		&i.WordOfSupport,
		&i.Status,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePicture,
	)
	return i, err
}

const getMostBackingDonor = `-- name: GetMostBackingDonor :one
SELECT backings.id, backings.project_id, backings.backer_id, backings.amount, backings.word_of_support, backings.status, backings.created_at, users.first_name, users.last_name, users.profile_picture
FROM backings
LEFT JOIN users
ON backings.backer_id = users.id
WHERE project_id = $1
ORDER BY backings.amount DESC
LIMIT 1
`

type GetMostBackingDonorRow struct {
	ID             uuid.UUID
	ProjectID      uuid.UUID
	BackerID       uuid.UUID
	Amount         int64
	WordOfSupport  *string
	Status         BackingStatus
	CreatedAt      time.Time
	FirstName      *string
	LastName       *string
	ProfilePicture *string
}

func (q *Queries) GetMostBackingDonor(ctx context.Context, projectID uuid.UUID) (GetMostBackingDonorRow, error) {
	row := q.db.QueryRow(ctx, getMostBackingDonor, projectID)
	var i GetMostBackingDonorRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BackerID,
		&i.Amount,
		&i.WordOfSupport,
		&i.Status,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePicture,
	)
	return i, err
}

const getMostRecentBackingDonor = `-- name: GetMostRecentBackingDonor :one
SELECT backings.id, backings.project_id, backings.backer_id, backings.amount, backings.word_of_support, backings.status, backings.created_at, users.first_name, users.last_name, users.profile_picture
FROM backings
LEFT JOIN users
ON backings.backer_id = users.id
WHERE project_id = $1
ORDER BY backings.created_at DESC
LIMIT 1
`

type GetMostRecentBackingDonorRow struct {
	ID             uuid.UUID
	ProjectID      uuid.UUID
	BackerID       uuid.UUID
	Amount         int64
	WordOfSupport  *string
	Status         BackingStatus
	CreatedAt      time.Time
	FirstName      *string
	LastName       *string
	ProfilePicture *string
}

func (q *Queries) GetMostRecentBackingDonor(ctx context.Context, projectID uuid.UUID) (GetMostRecentBackingDonorRow, error) {
	row := q.db.QueryRow(ctx, getMostRecentBackingDonor, projectID)
	var i GetMostRecentBackingDonorRow
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.BackerID,
		&i.Amount,
		&i.WordOfSupport,
		&i.Status,
		&i.CreatedAt,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePicture,
	)
	return i, err
}

const updateProjectBackingStatus = `-- name: UpdateProjectBackingStatus :exec
UPDATE backings
SET status = $2
WHERE project_id = $1
`

type UpdateProjectBackingStatusParams struct {
	ProjectID uuid.UUID
	Status    BackingStatus
}

func (q *Queries) UpdateProjectBackingStatus(ctx context.Context, arg UpdateProjectBackingStatusParams) error {
	_, err := q.db.Exec(ctx, updateProjectBackingStatus, arg.ProjectID, arg.Status)
	return err
}
