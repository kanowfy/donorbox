// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transaction.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    project_id, transaction_type, amount, initiator_card_id, recipient_card_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, project_id, transaction_type, amount, initiator_card_id, recipient_card_id, status, created_at
`

type CreateTransactionParams struct {
	ProjectID       uuid.UUID
	TransactionType TransactionType
	Amount          int64
	InitiatorCardID uuid.UUID
	RecipientCardID uuid.UUID
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ProjectID,
		arg.TransactionType,
		arg.Amount,
		arg.InitiatorCardID,
		arg.RecipientCardID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.TransactionType,
		&i.Amount,
		&i.InitiatorCardID,
		&i.RecipientCardID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT id, project_id, transaction_type, amount, initiator_card_id, recipient_card_id, status, created_at FROM transactions
ORDER BY created_at DESC
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.TransactionType,
			&i.Amount,
			&i.InitiatorCardID,
			&i.RecipientCardID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBackingTransactionsForProject = `-- name: GetBackingTransactionsForProject :many
SELECT id, project_id, transaction_type, amount, initiator_card_id, recipient_card_id, status, created_at FROM transactions
WHERE project_id = $1 AND transaction_type = 'backing'
`

func (q *Queries) GetBackingTransactionsForProject(ctx context.Context, projectID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getBackingTransactionsForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.TransactionType,
			&i.Amount,
			&i.InitiatorCardID,
			&i.RecipientCardID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatistics = `-- name: GetStatistics :one
SELECT (
	SELECT COUNT(*) AS status_aggregation
	FROM projects GROUP BY status HAVING status = 'ended'
) AS ended, (
	SELECT COUNT(*) AS status_aggregation
	FROM projects GROUP BY status HAVING status = 'ongoing'
) AS ongoing, (
	SELECT COUNT(*) AS status_aggregation
	FROM projects GROUP BY status HAVING status = 'completed_payout'
) AS completed_payout, (
	SELECT COUNT(*) AS status_aggregation
	FROM projects GROUP BY status HAVING status = 'completed_refund'
) AS completed_refund, ((
	SELECT SUM(amount) AS transaction_amount
	FROM transactions GROUP BY transaction_type HAVING transaction_type = 'backing'
) - (
	SELECT SUM(amount) AS transaction_amount
	FROM transactions GROUP BY transaction_type HAVING transaction_type = 'payout'
) - (
	SELECT SUM(amount) AS transaction_amount
	FROM transactions GROUP BY transaction_type HAVING transaction_type = 'refund'
)) AS balance
`

type GetStatisticsRow struct {
	Ended           int64
	Ongoing         int64
	CompletedPayout int64
	CompletedRefund int64
	Balance         int32
}

func (q *Queries) GetStatistics(ctx context.Context) (GetStatisticsRow, error) {
	row := q.db.QueryRow(ctx, getStatistics)
	var i GetStatisticsRow
	err := row.Scan(
		&i.Ended,
		&i.Ongoing,
		&i.CompletedPayout,
		&i.CompletedRefund,
		&i.Balance,
	)
	return i, err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, project_id, transaction_type, amount, initiator_card_id, recipient_card_id, status, created_at FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.TransactionType,
		&i.Amount,
		&i.InitiatorCardID,
		&i.RecipientCardID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionsForProject = `-- name: GetTransactionsForProject :many
SELECT id, project_id, transaction_type, amount, initiator_card_id, recipient_card_id, status, created_at FROM transactions
WHERE project_id = $1 ORDER BY created_at ASC
`

func (q *Queries) GetTransactionsForProject(ctx context.Context, projectID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.TransactionType,
			&i.Amount,
			&i.InitiatorCardID,
			&i.RecipientCardID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsStatsByWeek = `-- name: GetTransactionsStatsByWeek :many
SELECT
    DATE_TRUNC('week', created_at)::date AS week,
    COUNT(*) FILTER (WHERE transaction_type = 'backing') AS backings,
	COUNT(*) FILTER (WHERE transaction_type = 'payout') AS payouts,
	COUNT(*) FILTER (WHERE transaction_type = 'refund') AS refunds
FROM
    transactions
GROUP BY
    week
ORDER BY
    week
`

type GetTransactionsStatsByWeekRow struct {
	Week     pgtype.Date
	Backings int64
	Payouts  int64
	Refunds  int64
}

func (q *Queries) GetTransactionsStatsByWeek(ctx context.Context) ([]GetTransactionsStatsByWeekRow, error) {
	rows, err := q.db.Query(ctx, getTransactionsStatsByWeek)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsStatsByWeekRow
	for rows.Next() {
		var i GetTransactionsStatsByWeekRow
		if err := rows.Scan(
			&i.Week,
			&i.Backings,
			&i.Payouts,
			&i.Refunds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE transactions
SET status = $2
WHERE id = $1
`

type UpdateTransactionStatusParams struct {
	ID     uuid.UUID
	Status TransactionStatus
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.Exec(ctx, updateTransactionStatus, arg.ID, arg.Status)
	return err
}
