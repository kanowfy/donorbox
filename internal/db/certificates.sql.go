// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: certificates.sql

package db

import (
	"context"
	"time"
)

const createCertificate = `-- name: CreateCertificate :one
INSERT INTO certificates (
    escrow_user_id, user_id, milestone_id
) VALUES (
    $1, $2, $3
)
RETURNING id, escrow_user_id, user_id, milestone_id, verified, verified_at, created_at
`

type CreateCertificateParams struct {
	EscrowUserID int64
	UserID       int64
	MilestoneID  int64
}

func (q *Queries) CreateCertificate(ctx context.Context, arg CreateCertificateParams) (Certificate, error) {
	row := q.db.QueryRow(ctx, createCertificate, arg.EscrowUserID, arg.UserID, arg.MilestoneID)
	var i Certificate
	err := row.Scan(
		&i.ID,
		&i.EscrowUserID,
		&i.UserID,
		&i.MilestoneID,
		&i.Verified,
		&i.VerifiedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAllVerifiedCertificates = `-- name: GetAllVerifiedCertificates :many
SELECT id, escrow_user_id, user_id, milestone_id, verified, verified_at, created_at FROM certificates
WHERE verified
ORDER BY created_at DESC
`

func (q *Queries) GetAllVerifiedCertificates(ctx context.Context) ([]Certificate, error) {
	rows, err := q.db.Query(ctx, getAllVerifiedCertificates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Certificate
	for rows.Next() {
		var i Certificate
		if err := rows.Scan(
			&i.ID,
			&i.EscrowUserID,
			&i.UserID,
			&i.MilestoneID,
			&i.Verified,
			&i.VerifiedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCerificateByID = `-- name: GetCerificateByID :one
SELECT id, escrow_user_id, user_id, milestone_id, verified, verified_at, created_at FROM certificates
WHERE id = $1
`

func (q *Queries) GetCerificateByID(ctx context.Context, id int64) (Certificate, error) {
	row := q.db.QueryRow(ctx, getCerificateByID, id)
	var i Certificate
	err := row.Scan(
		&i.ID,
		&i.EscrowUserID,
		&i.UserID,
		&i.MilestoneID,
		&i.Verified,
		&i.VerifiedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateVerifyingCertificate = `-- name: UpdateVerifyingCertificate :exec
UPDATE certificates
SET verified = TRUE, verified_at = $2
WHERE milestone_id = $1
`

type UpdateVerifyingCertificateParams struct {
	MilestoneID int64
	VerifiedAt  time.Time
}

func (q *Queries) UpdateVerifyingCertificate(ctx context.Context, arg UpdateVerifyingCertificateParams) error {
	_, err := q.db.Exec(ctx, updateVerifyingCertificate, arg.MilestoneID, arg.VerifiedAt)
	return err
}
