// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notification.sql

package db

import (
	"context"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
    user_id, notification_type, message, project_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, notification_type, message, project_id, is_read, created_at
`

type CreateNotificationParams struct {
	UserID           int64
	NotificationType NotificationType
	Message          string
	ProjectID        *int64
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification,
		arg.UserID,
		arg.NotificationType,
		arg.Message,
		arg.ProjectID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NotificationType,
		&i.Message,
		&i.ProjectID,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const getNotificationsForUser = `-- name: GetNotificationsForUser :many
SELECT id, user_id, notification_type, message, project_id, is_read, created_at FROM notifications
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetNotificationsForUser(ctx context.Context, userID int64) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.NotificationType,
			&i.Message,
			&i.ProjectID,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReadNotification = `-- name: UpdateReadNotification :exec
UPDATE notifications
SET is_read = TRUE
WHERE id = $1
`

func (q *Queries) UpdateReadNotification(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateReadNotification, id)
	return err
}
