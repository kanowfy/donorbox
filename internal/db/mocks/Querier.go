// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/kanowfy/donorbox/internal/db"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// ActivateUser provides a mock function with given fields: ctx, id
func (_m *Querier) ActivateUser(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ActivateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_ActivateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateUser'
type Querier_ActivateUser_Call struct {
	*mock.Call
}

// ActivateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) ActivateUser(ctx interface{}, id interface{}) *Querier_ActivateUser_Call {
	return &Querier_ActivateUser_Call{Call: _e.mock.On("ActivateUser", ctx, id)}
}

func (_c *Querier_ActivateUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_ActivateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_ActivateUser_Call) Return(_a0 error) *Querier_ActivateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_ActivateUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Querier_ActivateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBacking provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateBacking(ctx context.Context, arg db.CreateBackingParams) (db.Backing, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateBacking")
	}

	var r0 db.Backing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateBackingParams) (db.Backing, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateBackingParams) db.Backing); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Backing)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateBackingParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateBacking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBacking'
type Querier_CreateBacking_Call struct {
	*mock.Call
}

// CreateBacking is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateBackingParams
func (_e *Querier_Expecter) CreateBacking(ctx interface{}, arg interface{}) *Querier_CreateBacking_Call {
	return &Querier_CreateBacking_Call{Call: _e.mock.On("CreateBacking", ctx, arg)}
}

func (_c *Querier_CreateBacking_Call) Run(run func(ctx context.Context, arg db.CreateBackingParams)) *Querier_CreateBacking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateBackingParams))
	})
	return _c
}

func (_c *Querier_CreateBacking_Call) Return(_a0 db.Backing, _a1 error) *Querier_CreateBacking_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateBacking_Call) RunAndReturn(run func(context.Context, db.CreateBackingParams) (db.Backing, error)) *Querier_CreateBacking_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCard provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateCard(ctx context.Context, arg db.CreateCardParams) (db.Card, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateCard")
	}

	var r0 db.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateCardParams) (db.Card, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateCardParams) db.Card); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Card)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateCardParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCard'
type Querier_CreateCard_Call struct {
	*mock.Call
}

// CreateCard is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateCardParams
func (_e *Querier_Expecter) CreateCard(ctx interface{}, arg interface{}) *Querier_CreateCard_Call {
	return &Querier_CreateCard_Call{Call: _e.mock.On("CreateCard", ctx, arg)}
}

func (_c *Querier_CreateCard_Call) Run(run func(ctx context.Context, arg db.CreateCardParams)) *Querier_CreateCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateCardParams))
	})
	return _c
}

func (_c *Querier_CreateCard_Call) Return(_a0 db.Card, _a1 error) *Querier_CreateCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateCard_Call) RunAndReturn(run func(context.Context, db.CreateCardParams) (db.Card, error)) *Querier_CreateCard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateProject(ctx context.Context, arg db.CreateProjectParams) (db.Project, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 db.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateProjectParams) (db.Project, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateProjectParams) db.Project); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Project)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateProjectParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type Querier_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateProjectParams
func (_e *Querier_Expecter) CreateProject(ctx interface{}, arg interface{}) *Querier_CreateProject_Call {
	return &Querier_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, arg)}
}

func (_c *Querier_CreateProject_Call) Run(run func(ctx context.Context, arg db.CreateProjectParams)) *Querier_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateProjectParams))
	})
	return _c
}

func (_c *Querier_CreateProject_Call) Return(_a0 db.Project, _a1 error) *Querier_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateProject_Call) RunAndReturn(run func(context.Context, db.CreateProjectParams) (db.Project, error)) *Querier_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectUpdate provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateProjectUpdate(ctx context.Context, arg db.CreateProjectUpdateParams) (db.ProjectUpdate, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectUpdate")
	}

	var r0 db.ProjectUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateProjectUpdateParams) (db.ProjectUpdate, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateProjectUpdateParams) db.ProjectUpdate); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.ProjectUpdate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateProjectUpdateParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateProjectUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectUpdate'
type Querier_CreateProjectUpdate_Call struct {
	*mock.Call
}

// CreateProjectUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateProjectUpdateParams
func (_e *Querier_Expecter) CreateProjectUpdate(ctx interface{}, arg interface{}) *Querier_CreateProjectUpdate_Call {
	return &Querier_CreateProjectUpdate_Call{Call: _e.mock.On("CreateProjectUpdate", ctx, arg)}
}

func (_c *Querier_CreateProjectUpdate_Call) Run(run func(ctx context.Context, arg db.CreateProjectUpdateParams)) *Querier_CreateProjectUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateProjectUpdateParams))
	})
	return _c
}

func (_c *Querier_CreateProjectUpdate_Call) Return(_a0 db.ProjectUpdate, _a1 error) *Querier_CreateProjectUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateProjectUpdate_Call) RunAndReturn(run func(context.Context, db.CreateProjectUpdateParams) (db.ProjectUpdate, error)) *Querier_CreateProjectUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReport provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateReport(ctx context.Context, arg db.CreateReportParams) (db.Report, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateReport")
	}

	var r0 db.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateReportParams) (db.Report, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateReportParams) db.Report); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Report)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateReportParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReport'
type Querier_CreateReport_Call struct {
	*mock.Call
}

// CreateReport is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateReportParams
func (_e *Querier_Expecter) CreateReport(ctx interface{}, arg interface{}) *Querier_CreateReport_Call {
	return &Querier_CreateReport_Call{Call: _e.mock.On("CreateReport", ctx, arg)}
}

func (_c *Querier_CreateReport_Call) Run(run func(ctx context.Context, arg db.CreateReportParams)) *Querier_CreateReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateReportParams))
	})
	return _c
}

func (_c *Querier_CreateReport_Call) Return(_a0 db.Report, _a1 error) *Querier_CreateReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateReport_Call) RunAndReturn(run func(context.Context, db.CreateReportParams) (db.Report, error)) *Querier_CreateReport_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSocialLoginUser provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateSocialLoginUser(ctx context.Context, arg db.CreateSocialLoginUserParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSocialLoginUser")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSocialLoginUserParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSocialLoginUserParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateSocialLoginUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateSocialLoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSocialLoginUser'
type Querier_CreateSocialLoginUser_Call struct {
	*mock.Call
}

// CreateSocialLoginUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateSocialLoginUserParams
func (_e *Querier_Expecter) CreateSocialLoginUser(ctx interface{}, arg interface{}) *Querier_CreateSocialLoginUser_Call {
	return &Querier_CreateSocialLoginUser_Call{Call: _e.mock.On("CreateSocialLoginUser", ctx, arg)}
}

func (_c *Querier_CreateSocialLoginUser_Call) Run(run func(ctx context.Context, arg db.CreateSocialLoginUserParams)) *Querier_CreateSocialLoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateSocialLoginUserParams))
	})
	return _c
}

func (_c *Querier_CreateSocialLoginUser_Call) Return(_a0 db.User, _a1 error) *Querier_CreateSocialLoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateSocialLoginUser_Call) RunAndReturn(run func(context.Context, db.CreateSocialLoginUserParams) (db.User, error)) *Querier_CreateSocialLoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransaction provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateTransaction(ctx context.Context, arg db.CreateTransactionParams) (db.Transaction, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 db.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransactionParams) (db.Transaction, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransactionParams) db.Transaction); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateTransactionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type Querier_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateTransactionParams
func (_e *Querier_Expecter) CreateTransaction(ctx interface{}, arg interface{}) *Querier_CreateTransaction_Call {
	return &Querier_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, arg)}
}

func (_c *Querier_CreateTransaction_Call) Run(run func(ctx context.Context, arg db.CreateTransactionParams)) *Querier_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateTransactionParams))
	})
	return _c
}

func (_c *Querier_CreateTransaction_Call) Return(_a0 db.Transaction, _a1 error) *Querier_CreateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateTransaction_Call) RunAndReturn(run func(context.Context, db.CreateTransactionParams) (db.Transaction, error)) *Querier_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Querier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateUserParams
func (_e *Querier_Expecter) CreateUser(ctx interface{}, arg interface{}) *Querier_CreateUser_Call {
	return &Querier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *Querier_CreateUser_Call) Run(run func(ctx context.Context, arg db.CreateUserParams)) *Querier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateUserParams))
	})
	return _c
}

func (_c *Querier_CreateUser_Call) Return(_a0 db.User, _a1 error) *Querier_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateUser_Call) RunAndReturn(run func(context.Context, db.CreateUserParams) (db.User, error)) *Querier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectByID provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteProjectByID(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_DeleteProjectByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectByID'
type Querier_DeleteProjectByID_Call struct {
	*mock.Call
}

// DeleteProjectByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) DeleteProjectByID(ctx interface{}, id interface{}) *Querier_DeleteProjectByID_Call {
	return &Querier_DeleteProjectByID_Call{Call: _e.mock.On("DeleteProjectByID", ctx, id)}
}

func (_c *Querier_DeleteProjectByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_DeleteProjectByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_DeleteProjectByID_Call) Return(_a0 error) *Querier_DeleteProjectByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_DeleteProjectByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Querier_DeleteProjectByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectUpdate provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteProjectUpdate(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_DeleteProjectUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectUpdate'
type Querier_DeleteProjectUpdate_Call struct {
	*mock.Call
}

// DeleteProjectUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) DeleteProjectUpdate(ctx interface{}, id interface{}) *Querier_DeleteProjectUpdate_Call {
	return &Querier_DeleteProjectUpdate_Call{Call: _e.mock.On("DeleteProjectUpdate", ctx, id)}
}

func (_c *Querier_DeleteProjectUpdate_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_DeleteProjectUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_DeleteProjectUpdate_Call) Return(_a0 error) *Querier_DeleteProjectUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_DeleteProjectUpdate_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Querier_DeleteProjectUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCategories provides a mock function with given fields: ctx
func (_m *Querier) GetAllCategories(ctx context.Context) ([]db.Category, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCategories")
	}

	var r0 []db.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.Category, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAllCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCategories'
type Querier_GetAllCategories_Call struct {
	*mock.Call
}

// GetAllCategories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) GetAllCategories(ctx interface{}) *Querier_GetAllCategories_Call {
	return &Querier_GetAllCategories_Call{Call: _e.mock.On("GetAllCategories", ctx)}
}

func (_c *Querier_GetAllCategories_Call) Run(run func(ctx context.Context)) *Querier_GetAllCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_GetAllCategories_Call) Return(_a0 []db.Category, _a1 error) *Querier_GetAllCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAllCategories_Call) RunAndReturn(run func(context.Context) ([]db.Category, error)) *Querier_GetAllCategories_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProjects provides a mock function with given fields: ctx, arg
func (_m *Querier) GetAllProjects(ctx context.Context, arg db.GetAllProjectsParams) ([]db.GetAllProjectsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProjects")
	}

	var r0 []db.GetAllProjectsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetAllProjectsParams) ([]db.GetAllProjectsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetAllProjectsParams) []db.GetAllProjectsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllProjectsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetAllProjectsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAllProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProjects'
type Querier_GetAllProjects_Call struct {
	*mock.Call
}

// GetAllProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetAllProjectsParams
func (_e *Querier_Expecter) GetAllProjects(ctx interface{}, arg interface{}) *Querier_GetAllProjects_Call {
	return &Querier_GetAllProjects_Call{Call: _e.mock.On("GetAllProjects", ctx, arg)}
}

func (_c *Querier_GetAllProjects_Call) Run(run func(ctx context.Context, arg db.GetAllProjectsParams)) *Querier_GetAllProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetAllProjectsParams))
	})
	return _c
}

func (_c *Querier_GetAllProjects_Call) Return(_a0 []db.GetAllProjectsRow, _a1 error) *Querier_GetAllProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAllProjects_Call) RunAndReturn(run func(context.Context, db.GetAllProjectsParams) ([]db.GetAllProjectsRow, error)) *Querier_GetAllProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactions provides a mock function with given fields: ctx
func (_m *Querier) GetAllTransactions(ctx context.Context) ([]db.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []db.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAllTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactions'
type Querier_GetAllTransactions_Call struct {
	*mock.Call
}

// GetAllTransactions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) GetAllTransactions(ctx interface{}) *Querier_GetAllTransactions_Call {
	return &Querier_GetAllTransactions_Call{Call: _e.mock.On("GetAllTransactions", ctx)}
}

func (_c *Querier_GetAllTransactions_Call) Run(run func(ctx context.Context)) *Querier_GetAllTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_GetAllTransactions_Call) Return(_a0 []db.Transaction, _a1 error) *Querier_GetAllTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAllTransactions_Call) RunAndReturn(run func(context.Context) ([]db.Transaction, error)) *Querier_GetAllTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *Querier) GetAllUsers(ctx context.Context) ([]db.GetAllUsersRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []db.GetAllUsersRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.GetAllUsersRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.GetAllUsersRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetAllUsersRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type Querier_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) GetAllUsers(ctx interface{}) *Querier_GetAllUsers_Call {
	return &Querier_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *Querier_GetAllUsers_Call) Run(run func(ctx context.Context)) *Querier_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_GetAllUsers_Call) Return(_a0 []db.GetAllUsersRow, _a1 error) *Querier_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAllUsers_Call) RunAndReturn(run func(context.Context) ([]db.GetAllUsersRow, error)) *Querier_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackingByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetBackingByID(ctx context.Context, id uuid.UUID) (db.Backing, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBackingByID")
	}

	var r0 db.Backing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Backing, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Backing); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Backing)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetBackingByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackingByID'
type Querier_GetBackingByID_Call struct {
	*mock.Call
}

// GetBackingByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) GetBackingByID(ctx interface{}, id interface{}) *Querier_GetBackingByID_Call {
	return &Querier_GetBackingByID_Call{Call: _e.mock.On("GetBackingByID", ctx, id)}
}

func (_c *Querier_GetBackingByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_GetBackingByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetBackingByID_Call) Return(_a0 db.Backing, _a1 error) *Querier_GetBackingByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetBackingByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.Backing, error)) *Querier_GetBackingByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackingCountForProject provides a mock function with given fields: ctx, projectID
func (_m *Querier) GetBackingCountForProject(ctx context.Context, projectID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetBackingCountForProject")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetBackingCountForProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackingCountForProject'
type Querier_GetBackingCountForProject_Call struct {
	*mock.Call
}

// GetBackingCountForProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Querier_Expecter) GetBackingCountForProject(ctx interface{}, projectID interface{}) *Querier_GetBackingCountForProject_Call {
	return &Querier_GetBackingCountForProject_Call{Call: _e.mock.On("GetBackingCountForProject", ctx, projectID)}
}

func (_c *Querier_GetBackingCountForProject_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Querier_GetBackingCountForProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetBackingCountForProject_Call) Return(_a0 int64, _a1 error) *Querier_GetBackingCountForProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetBackingCountForProject_Call) RunAndReturn(run func(context.Context, uuid.UUID) (int64, error)) *Querier_GetBackingCountForProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackingTransactionsForProject provides a mock function with given fields: ctx, projectID
func (_m *Querier) GetBackingTransactionsForProject(ctx context.Context, projectID uuid.UUID) ([]db.Transaction, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetBackingTransactionsForProject")
	}

	var r0 []db.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.Transaction, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.Transaction); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetBackingTransactionsForProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackingTransactionsForProject'
type Querier_GetBackingTransactionsForProject_Call struct {
	*mock.Call
}

// GetBackingTransactionsForProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Querier_Expecter) GetBackingTransactionsForProject(ctx interface{}, projectID interface{}) *Querier_GetBackingTransactionsForProject_Call {
	return &Querier_GetBackingTransactionsForProject_Call{Call: _e.mock.On("GetBackingTransactionsForProject", ctx, projectID)}
}

func (_c *Querier_GetBackingTransactionsForProject_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Querier_GetBackingTransactionsForProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetBackingTransactionsForProject_Call) Return(_a0 []db.Transaction, _a1 error) *Querier_GetBackingTransactionsForProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetBackingTransactionsForProject_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]db.Transaction, error)) *Querier_GetBackingTransactionsForProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackingsForProject provides a mock function with given fields: ctx, projectID
func (_m *Querier) GetBackingsForProject(ctx context.Context, projectID uuid.UUID) ([]db.GetBackingsForProjectRow, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetBackingsForProject")
	}

	var r0 []db.GetBackingsForProjectRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.GetBackingsForProjectRow, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.GetBackingsForProjectRow); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetBackingsForProjectRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetBackingsForProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackingsForProject'
type Querier_GetBackingsForProject_Call struct {
	*mock.Call
}

// GetBackingsForProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Querier_Expecter) GetBackingsForProject(ctx interface{}, projectID interface{}) *Querier_GetBackingsForProject_Call {
	return &Querier_GetBackingsForProject_Call{Call: _e.mock.On("GetBackingsForProject", ctx, projectID)}
}

func (_c *Querier_GetBackingsForProject_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Querier_GetBackingsForProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetBackingsForProject_Call) Return(_a0 []db.GetBackingsForProjectRow, _a1 error) *Querier_GetBackingsForProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetBackingsForProject_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]db.GetBackingsForProjectRow, error)) *Querier_GetBackingsForProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetBackingsForUser provides a mock function with given fields: ctx, backerID
func (_m *Querier) GetBackingsForUser(ctx context.Context, backerID uuid.UUID) ([]db.Backing, error) {
	ret := _m.Called(ctx, backerID)

	if len(ret) == 0 {
		panic("no return value specified for GetBackingsForUser")
	}

	var r0 []db.Backing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.Backing, error)); ok {
		return rf(ctx, backerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.Backing); ok {
		r0 = rf(ctx, backerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Backing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, backerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetBackingsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBackingsForUser'
type Querier_GetBackingsForUser_Call struct {
	*mock.Call
}

// GetBackingsForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - backerID uuid.UUID
func (_e *Querier_Expecter) GetBackingsForUser(ctx interface{}, backerID interface{}) *Querier_GetBackingsForUser_Call {
	return &Querier_GetBackingsForUser_Call{Call: _e.mock.On("GetBackingsForUser", ctx, backerID)}
}

func (_c *Querier_GetBackingsForUser_Call) Run(run func(ctx context.Context, backerID uuid.UUID)) *Querier_GetBackingsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetBackingsForUser_Call) Return(_a0 []db.Backing, _a1 error) *Querier_GetBackingsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetBackingsForUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]db.Backing, error)) *Querier_GetBackingsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetCardByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetCardByID(ctx context.Context, id uuid.UUID) (db.Card, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCardByID")
	}

	var r0 db.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Card, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Card); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Card)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetCardByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardByID'
type Querier_GetCardByID_Call struct {
	*mock.Call
}

// GetCardByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) GetCardByID(ctx interface{}, id interface{}) *Querier_GetCardByID_Call {
	return &Querier_GetCardByID_Call{Call: _e.mock.On("GetCardByID", ctx, id)}
}

func (_c *Querier_GetCardByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_GetCardByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetCardByID_Call) Return(_a0 db.Card, _a1 error) *Querier_GetCardByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetCardByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.Card, error)) *Querier_GetCardByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEndedProjects provides a mock function with given fields: ctx
func (_m *Querier) GetEndedProjects(ctx context.Context) ([]db.GetEndedProjectsRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEndedProjects")
	}

	var r0 []db.GetEndedProjectsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.GetEndedProjectsRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.GetEndedProjectsRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetEndedProjectsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetEndedProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEndedProjects'
type Querier_GetEndedProjects_Call struct {
	*mock.Call
}

// GetEndedProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) GetEndedProjects(ctx interface{}) *Querier_GetEndedProjects_Call {
	return &Querier_GetEndedProjects_Call{Call: _e.mock.On("GetEndedProjects", ctx)}
}

func (_c *Querier_GetEndedProjects_Call) Run(run func(ctx context.Context)) *Querier_GetEndedProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_GetEndedProjects_Call) Return(_a0 []db.GetEndedProjectsRow, _a1 error) *Querier_GetEndedProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetEndedProjects_Call) RunAndReturn(run func(context.Context) ([]db.GetEndedProjectsRow, error)) *Querier_GetEndedProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetEscrowUser provides a mock function with given fields: ctx
func (_m *Querier) GetEscrowUser(ctx context.Context) (db.EscrowUser, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEscrowUser")
	}

	var r0 db.EscrowUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (db.EscrowUser, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) db.EscrowUser); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(db.EscrowUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetEscrowUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEscrowUser'
type Querier_GetEscrowUser_Call struct {
	*mock.Call
}

// GetEscrowUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) GetEscrowUser(ctx interface{}) *Querier_GetEscrowUser_Call {
	return &Querier_GetEscrowUser_Call{Call: _e.mock.On("GetEscrowUser", ctx)}
}

func (_c *Querier_GetEscrowUser_Call) Run(run func(ctx context.Context)) *Querier_GetEscrowUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_GetEscrowUser_Call) Return(_a0 db.EscrowUser, _a1 error) *Querier_GetEscrowUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetEscrowUser_Call) RunAndReturn(run func(context.Context) (db.EscrowUser, error)) *Querier_GetEscrowUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetEscrowUserByEmail provides a mock function with given fields: ctx, email
func (_m *Querier) GetEscrowUserByEmail(ctx context.Context, email string) (db.EscrowUser, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetEscrowUserByEmail")
	}

	var r0 db.EscrowUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.EscrowUser, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.EscrowUser); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(db.EscrowUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetEscrowUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEscrowUserByEmail'
type Querier_GetEscrowUserByEmail_Call struct {
	*mock.Call
}

// GetEscrowUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Querier_Expecter) GetEscrowUserByEmail(ctx interface{}, email interface{}) *Querier_GetEscrowUserByEmail_Call {
	return &Querier_GetEscrowUserByEmail_Call{Call: _e.mock.On("GetEscrowUserByEmail", ctx, email)}
}

func (_c *Querier_GetEscrowUserByEmail_Call) Run(run func(ctx context.Context, email string)) *Querier_GetEscrowUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Querier_GetEscrowUserByEmail_Call) Return(_a0 db.EscrowUser, _a1 error) *Querier_GetEscrowUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetEscrowUserByEmail_Call) RunAndReturn(run func(context.Context, string) (db.EscrowUser, error)) *Querier_GetEscrowUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetEscrowUserByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetEscrowUserByID(ctx context.Context, id uuid.UUID) (db.EscrowUser, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEscrowUserByID")
	}

	var r0 db.EscrowUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.EscrowUser, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.EscrowUser); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.EscrowUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetEscrowUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEscrowUserByID'
type Querier_GetEscrowUserByID_Call struct {
	*mock.Call
}

// GetEscrowUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) GetEscrowUserByID(ctx interface{}, id interface{}) *Querier_GetEscrowUserByID_Call {
	return &Querier_GetEscrowUserByID_Call{Call: _e.mock.On("GetEscrowUserByID", ctx, id)}
}

func (_c *Querier_GetEscrowUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_GetEscrowUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetEscrowUserByID_Call) Return(_a0 db.EscrowUser, _a1 error) *Querier_GetEscrowUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetEscrowUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.EscrowUser, error)) *Querier_GetEscrowUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstBackingDonor provides a mock function with given fields: ctx, projectID
func (_m *Querier) GetFirstBackingDonor(ctx context.Context, projectID uuid.UUID) (db.GetFirstBackingDonorRow, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstBackingDonor")
	}

	var r0 db.GetFirstBackingDonorRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GetFirstBackingDonorRow, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GetFirstBackingDonorRow); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(db.GetFirstBackingDonorRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetFirstBackingDonor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstBackingDonor'
type Querier_GetFirstBackingDonor_Call struct {
	*mock.Call
}

// GetFirstBackingDonor is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Querier_Expecter) GetFirstBackingDonor(ctx interface{}, projectID interface{}) *Querier_GetFirstBackingDonor_Call {
	return &Querier_GetFirstBackingDonor_Call{Call: _e.mock.On("GetFirstBackingDonor", ctx, projectID)}
}

func (_c *Querier_GetFirstBackingDonor_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Querier_GetFirstBackingDonor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetFirstBackingDonor_Call) Return(_a0 db.GetFirstBackingDonorRow, _a1 error) *Querier_GetFirstBackingDonor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetFirstBackingDonor_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.GetFirstBackingDonorRow, error)) *Querier_GetFirstBackingDonor_Call {
	_c.Call.Return(run)
	return _c
}

// GetMostBackingDonor provides a mock function with given fields: ctx, projectID
func (_m *Querier) GetMostBackingDonor(ctx context.Context, projectID uuid.UUID) (db.GetMostBackingDonorRow, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetMostBackingDonor")
	}

	var r0 db.GetMostBackingDonorRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GetMostBackingDonorRow, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GetMostBackingDonorRow); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(db.GetMostBackingDonorRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetMostBackingDonor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostBackingDonor'
type Querier_GetMostBackingDonor_Call struct {
	*mock.Call
}

// GetMostBackingDonor is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Querier_Expecter) GetMostBackingDonor(ctx interface{}, projectID interface{}) *Querier_GetMostBackingDonor_Call {
	return &Querier_GetMostBackingDonor_Call{Call: _e.mock.On("GetMostBackingDonor", ctx, projectID)}
}

func (_c *Querier_GetMostBackingDonor_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Querier_GetMostBackingDonor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetMostBackingDonor_Call) Return(_a0 db.GetMostBackingDonorRow, _a1 error) *Querier_GetMostBackingDonor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetMostBackingDonor_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.GetMostBackingDonorRow, error)) *Querier_GetMostBackingDonor_Call {
	_c.Call.Return(run)
	return _c
}

// GetMostRecentBackingDonor provides a mock function with given fields: ctx, projectID
func (_m *Querier) GetMostRecentBackingDonor(ctx context.Context, projectID uuid.UUID) (db.GetMostRecentBackingDonorRow, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentBackingDonor")
	}

	var r0 db.GetMostRecentBackingDonorRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.GetMostRecentBackingDonorRow, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.GetMostRecentBackingDonorRow); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(db.GetMostRecentBackingDonorRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetMostRecentBackingDonor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostRecentBackingDonor'
type Querier_GetMostRecentBackingDonor_Call struct {
	*mock.Call
}

// GetMostRecentBackingDonor is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Querier_Expecter) GetMostRecentBackingDonor(ctx interface{}, projectID interface{}) *Querier_GetMostRecentBackingDonor_Call {
	return &Querier_GetMostRecentBackingDonor_Call{Call: _e.mock.On("GetMostRecentBackingDonor", ctx, projectID)}
}

func (_c *Querier_GetMostRecentBackingDonor_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Querier_GetMostRecentBackingDonor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetMostRecentBackingDonor_Call) Return(_a0 db.GetMostRecentBackingDonorRow, _a1 error) *Querier_GetMostRecentBackingDonor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetMostRecentBackingDonor_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.GetMostRecentBackingDonorRow, error)) *Querier_GetMostRecentBackingDonor_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetProjectByID(ctx context.Context, id uuid.UUID) (db.Project, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByID")
	}

	var r0 db.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Project, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Project); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Project)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetProjectByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByID'
type Querier_GetProjectByID_Call struct {
	*mock.Call
}

// GetProjectByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) GetProjectByID(ctx interface{}, id interface{}) *Querier_GetProjectByID_Call {
	return &Querier_GetProjectByID_Call{Call: _e.mock.On("GetProjectByID", ctx, id)}
}

func (_c *Querier_GetProjectByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_GetProjectByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetProjectByID_Call) Return(_a0 db.Project, _a1 error) *Querier_GetProjectByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetProjectByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.Project, error)) *Querier_GetProjectByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectUpdates provides a mock function with given fields: ctx, projectID
func (_m *Querier) GetProjectUpdates(ctx context.Context, projectID uuid.UUID) ([]db.ProjectUpdate, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectUpdates")
	}

	var r0 []db.ProjectUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.ProjectUpdate, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.ProjectUpdate); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.ProjectUpdate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetProjectUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectUpdates'
type Querier_GetProjectUpdates_Call struct {
	*mock.Call
}

// GetProjectUpdates is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Querier_Expecter) GetProjectUpdates(ctx interface{}, projectID interface{}) *Querier_GetProjectUpdates_Call {
	return &Querier_GetProjectUpdates_Call{Call: _e.mock.On("GetProjectUpdates", ctx, projectID)}
}

func (_c *Querier_GetProjectUpdates_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Querier_GetProjectUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetProjectUpdates_Call) Return(_a0 []db.ProjectUpdate, _a1 error) *Querier_GetProjectUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetProjectUpdates_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]db.ProjectUpdate, error)) *Querier_GetProjectUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsForUser provides a mock function with given fields: ctx, userID
func (_m *Querier) GetProjectsForUser(ctx context.Context, userID uuid.UUID) ([]db.Project, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsForUser")
	}

	var r0 []db.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.Project, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.Project); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetProjectsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsForUser'
type Querier_GetProjectsForUser_Call struct {
	*mock.Call
}

// GetProjectsForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *Querier_Expecter) GetProjectsForUser(ctx interface{}, userID interface{}) *Querier_GetProjectsForUser_Call {
	return &Querier_GetProjectsForUser_Call{Call: _e.mock.On("GetProjectsForUser", ctx, userID)}
}

func (_c *Querier_GetProjectsForUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *Querier_GetProjectsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetProjectsForUser_Call) Return(_a0 []db.Project, _a1 error) *Querier_GetProjectsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetProjectsForUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]db.Project, error)) *Querier_GetProjectsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatistics provides a mock function with given fields: ctx
func (_m *Querier) GetStatistics(ctx context.Context) (db.GetStatisticsRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 db.GetStatisticsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (db.GetStatisticsRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) db.GetStatisticsRow); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(db.GetStatisticsRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatistics'
type Querier_GetStatistics_Call struct {
	*mock.Call
}

// GetStatistics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) GetStatistics(ctx interface{}) *Querier_GetStatistics_Call {
	return &Querier_GetStatistics_Call{Call: _e.mock.On("GetStatistics", ctx)}
}

func (_c *Querier_GetStatistics_Call) Run(run func(ctx context.Context)) *Querier_GetStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_GetStatistics_Call) Return(_a0 db.GetStatisticsRow, _a1 error) *Querier_GetStatistics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetStatistics_Call) RunAndReturn(run func(context.Context) (db.GetStatisticsRow, error)) *Querier_GetStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetTransactionByID(ctx context.Context, id uuid.UUID) (db.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 db.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetTransactionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByID'
type Querier_GetTransactionByID_Call struct {
	*mock.Call
}

// GetTransactionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) GetTransactionByID(ctx interface{}, id interface{}) *Querier_GetTransactionByID_Call {
	return &Querier_GetTransactionByID_Call{Call: _e.mock.On("GetTransactionByID", ctx, id)}
}

func (_c *Querier_GetTransactionByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_GetTransactionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetTransactionByID_Call) Return(_a0 db.Transaction, _a1 error) *Querier_GetTransactionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetTransactionByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.Transaction, error)) *Querier_GetTransactionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsForProject provides a mock function with given fields: ctx, projectID
func (_m *Querier) GetTransactionsForProject(ctx context.Context, projectID uuid.UUID) ([]db.Transaction, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsForProject")
	}

	var r0 []db.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]db.Transaction, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []db.Transaction); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetTransactionsForProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsForProject'
type Querier_GetTransactionsForProject_Call struct {
	*mock.Call
}

// GetTransactionsForProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID uuid.UUID
func (_e *Querier_Expecter) GetTransactionsForProject(ctx interface{}, projectID interface{}) *Querier_GetTransactionsForProject_Call {
	return &Querier_GetTransactionsForProject_Call{Call: _e.mock.On("GetTransactionsForProject", ctx, projectID)}
}

func (_c *Querier_GetTransactionsForProject_Call) Run(run func(ctx context.Context, projectID uuid.UUID)) *Querier_GetTransactionsForProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetTransactionsForProject_Call) Return(_a0 []db.Transaction, _a1 error) *Querier_GetTransactionsForProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetTransactionsForProject_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]db.Transaction, error)) *Querier_GetTransactionsForProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsStatsByWeek provides a mock function with given fields: ctx
func (_m *Querier) GetTransactionsStatsByWeek(ctx context.Context) ([]db.GetTransactionsStatsByWeekRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsStatsByWeek")
	}

	var r0 []db.GetTransactionsStatsByWeekRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.GetTransactionsStatsByWeekRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.GetTransactionsStatsByWeekRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.GetTransactionsStatsByWeekRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetTransactionsStatsByWeek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsStatsByWeek'
type Querier_GetTransactionsStatsByWeek_Call struct {
	*mock.Call
}

// GetTransactionsStatsByWeek is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) GetTransactionsStatsByWeek(ctx interface{}) *Querier_GetTransactionsStatsByWeek_Call {
	return &Querier_GetTransactionsStatsByWeek_Call{Call: _e.mock.On("GetTransactionsStatsByWeek", ctx)}
}

func (_c *Querier_GetTransactionsStatsByWeek_Call) Run(run func(ctx context.Context)) *Querier_GetTransactionsStatsByWeek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_GetTransactionsStatsByWeek_Call) Return(_a0 []db.GetTransactionsStatsByWeekRow, _a1 error) *Querier_GetTransactionsStatsByWeek_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetTransactionsStatsByWeek_Call) RunAndReturn(run func(context.Context) ([]db.GetTransactionsStatsByWeekRow, error)) *Querier_GetTransactionsStatsByWeek_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *Querier) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type Querier_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Querier_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *Querier_GetUserByEmail_Call {
	return &Querier_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *Querier_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *Querier_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Querier_GetUserByEmail_Call) Return(_a0 db.User, _a1 error) *Querier_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (db.User, error)) *Querier_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Querier) GetUserByID(ctx context.Context, id uuid.UUID) (db.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type Querier_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Querier_Expecter) GetUserByID(ctx interface{}, id interface{}) *Querier_GetUserByID_Call {
	return &Querier_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *Querier_GetUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Querier_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Querier_GetUserByID_Call) Return(_a0 db.User, _a1 error) *Querier_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.User, error)) *Querier_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// SearchProjects provides a mock function with given fields: ctx, arg
func (_m *Querier) SearchProjects(ctx context.Context, arg db.SearchProjectsParams) ([]db.SearchProjectsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SearchProjects")
	}

	var r0 []db.SearchProjectsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.SearchProjectsParams) ([]db.SearchProjectsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.SearchProjectsParams) []db.SearchProjectsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.SearchProjectsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.SearchProjectsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_SearchProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchProjects'
type Querier_SearchProjects_Call struct {
	*mock.Call
}

// SearchProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.SearchProjectsParams
func (_e *Querier_Expecter) SearchProjects(ctx interface{}, arg interface{}) *Querier_SearchProjects_Call {
	return &Querier_SearchProjects_Call{Call: _e.mock.On("SearchProjects", ctx, arg)}
}

func (_c *Querier_SearchProjects_Call) Run(run func(ctx context.Context, arg db.SearchProjectsParams)) *Querier_SearchProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.SearchProjectsParams))
	})
	return _c
}

func (_c *Querier_SearchProjects_Call) Return(_a0 []db.SearchProjectsRow, _a1 error) *Querier_SearchProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_SearchProjects_Call) RunAndReturn(run func(context.Context, db.SearchProjectsParams) ([]db.SearchProjectsRow, error)) *Querier_SearchProjects_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEscrowCard provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateEscrowCard(ctx context.Context, arg db.UpdateEscrowCardParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEscrowCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateEscrowCardParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateEscrowCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEscrowCard'
type Querier_UpdateEscrowCard_Call struct {
	*mock.Call
}

// UpdateEscrowCard is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateEscrowCardParams
func (_e *Querier_Expecter) UpdateEscrowCard(ctx interface{}, arg interface{}) *Querier_UpdateEscrowCard_Call {
	return &Querier_UpdateEscrowCard_Call{Call: _e.mock.On("UpdateEscrowCard", ctx, arg)}
}

func (_c *Querier_UpdateEscrowCard_Call) Run(run func(ctx context.Context, arg db.UpdateEscrowCardParams)) *Querier_UpdateEscrowCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateEscrowCardParams))
	})
	return _c
}

func (_c *Querier_UpdateEscrowCard_Call) Return(_a0 error) *Querier_UpdateEscrowCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateEscrowCard_Call) RunAndReturn(run func(context.Context, db.UpdateEscrowCardParams) error) *Querier_UpdateEscrowCard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEscrowUserByID provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateEscrowUserByID(ctx context.Context, arg db.UpdateEscrowUserByIDParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEscrowUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateEscrowUserByIDParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateEscrowUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEscrowUserByID'
type Querier_UpdateEscrowUserByID_Call struct {
	*mock.Call
}

// UpdateEscrowUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateEscrowUserByIDParams
func (_e *Querier_Expecter) UpdateEscrowUserByID(ctx interface{}, arg interface{}) *Querier_UpdateEscrowUserByID_Call {
	return &Querier_UpdateEscrowUserByID_Call{Call: _e.mock.On("UpdateEscrowUserByID", ctx, arg)}
}

func (_c *Querier_UpdateEscrowUserByID_Call) Run(run func(ctx context.Context, arg db.UpdateEscrowUserByIDParams)) *Querier_UpdateEscrowUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateEscrowUserByIDParams))
	})
	return _c
}

func (_c *Querier_UpdateEscrowUserByID_Call) Return(_a0 error) *Querier_UpdateEscrowUserByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateEscrowUserByID_Call) RunAndReturn(run func(context.Context, db.UpdateEscrowUserByIDParams) error) *Querier_UpdateEscrowUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFinishedProjectsStatus provides a mock function with given fields: ctx
func (_m *Querier) UpdateFinishedProjectsStatus(ctx context.Context) ([]db.Project, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFinishedProjectsStatus")
	}

	var r0 []db.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_UpdateFinishedProjectsStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFinishedProjectsStatus'
type Querier_UpdateFinishedProjectsStatus_Call struct {
	*mock.Call
}

// UpdateFinishedProjectsStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) UpdateFinishedProjectsStatus(ctx interface{}) *Querier_UpdateFinishedProjectsStatus_Call {
	return &Querier_UpdateFinishedProjectsStatus_Call{Call: _e.mock.On("UpdateFinishedProjectsStatus", ctx)}
}

func (_c *Querier_UpdateFinishedProjectsStatus_Call) Run(run func(ctx context.Context)) *Querier_UpdateFinishedProjectsStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_UpdateFinishedProjectsStatus_Call) Return(_a0 []db.Project, _a1 error) *Querier_UpdateFinishedProjectsStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_UpdateFinishedProjectsStatus_Call) RunAndReturn(run func(context.Context) ([]db.Project, error)) *Querier_UpdateFinishedProjectsStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectBackingStatus provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateProjectBackingStatus(ctx context.Context, arg db.UpdateProjectBackingStatusParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectBackingStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateProjectBackingStatusParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateProjectBackingStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectBackingStatus'
type Querier_UpdateProjectBackingStatus_Call struct {
	*mock.Call
}

// UpdateProjectBackingStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateProjectBackingStatusParams
func (_e *Querier_Expecter) UpdateProjectBackingStatus(ctx interface{}, arg interface{}) *Querier_UpdateProjectBackingStatus_Call {
	return &Querier_UpdateProjectBackingStatus_Call{Call: _e.mock.On("UpdateProjectBackingStatus", ctx, arg)}
}

func (_c *Querier_UpdateProjectBackingStatus_Call) Run(run func(ctx context.Context, arg db.UpdateProjectBackingStatusParams)) *Querier_UpdateProjectBackingStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateProjectBackingStatusParams))
	})
	return _c
}

func (_c *Querier_UpdateProjectBackingStatus_Call) Return(_a0 error) *Querier_UpdateProjectBackingStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateProjectBackingStatus_Call) RunAndReturn(run func(context.Context, db.UpdateProjectBackingStatusParams) error) *Querier_UpdateProjectBackingStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectByID provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateProjectByID(ctx context.Context, arg db.UpdateProjectByIDParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateProjectByIDParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateProjectByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectByID'
type Querier_UpdateProjectByID_Call struct {
	*mock.Call
}

// UpdateProjectByID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateProjectByIDParams
func (_e *Querier_Expecter) UpdateProjectByID(ctx interface{}, arg interface{}) *Querier_UpdateProjectByID_Call {
	return &Querier_UpdateProjectByID_Call{Call: _e.mock.On("UpdateProjectByID", ctx, arg)}
}

func (_c *Querier_UpdateProjectByID_Call) Run(run func(ctx context.Context, arg db.UpdateProjectByIDParams)) *Querier_UpdateProjectByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateProjectByIDParams))
	})
	return _c
}

func (_c *Querier_UpdateProjectByID_Call) Return(_a0 error) *Querier_UpdateProjectByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateProjectByID_Call) RunAndReturn(run func(context.Context, db.UpdateProjectByIDParams) error) *Querier_UpdateProjectByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectCard provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateProjectCard(ctx context.Context, arg db.UpdateProjectCardParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateProjectCardParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateProjectCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectCard'
type Querier_UpdateProjectCard_Call struct {
	*mock.Call
}

// UpdateProjectCard is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateProjectCardParams
func (_e *Querier_Expecter) UpdateProjectCard(ctx interface{}, arg interface{}) *Querier_UpdateProjectCard_Call {
	return &Querier_UpdateProjectCard_Call{Call: _e.mock.On("UpdateProjectCard", ctx, arg)}
}

func (_c *Querier_UpdateProjectCard_Call) Run(run func(ctx context.Context, arg db.UpdateProjectCardParams)) *Querier_UpdateProjectCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateProjectCardParams))
	})
	return _c
}

func (_c *Querier_UpdateProjectCard_Call) Return(_a0 error) *Querier_UpdateProjectCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateProjectCard_Call) RunAndReturn(run func(context.Context, db.UpdateProjectCardParams) error) *Querier_UpdateProjectCard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectFund provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateProjectFund(ctx context.Context, arg db.UpdateProjectFundParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectFund")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateProjectFundParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateProjectFund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectFund'
type Querier_UpdateProjectFund_Call struct {
	*mock.Call
}

// UpdateProjectFund is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateProjectFundParams
func (_e *Querier_Expecter) UpdateProjectFund(ctx interface{}, arg interface{}) *Querier_UpdateProjectFund_Call {
	return &Querier_UpdateProjectFund_Call{Call: _e.mock.On("UpdateProjectFund", ctx, arg)}
}

func (_c *Querier_UpdateProjectFund_Call) Run(run func(ctx context.Context, arg db.UpdateProjectFundParams)) *Querier_UpdateProjectFund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateProjectFundParams))
	})
	return _c
}

func (_c *Querier_UpdateProjectFund_Call) Return(_a0 error) *Querier_UpdateProjectFund_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateProjectFund_Call) RunAndReturn(run func(context.Context, db.UpdateProjectFundParams) error) *Querier_UpdateProjectFund_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectStatus provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateProjectStatus(ctx context.Context, arg db.UpdateProjectStatusParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateProjectStatusParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateProjectStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectStatus'
type Querier_UpdateProjectStatus_Call struct {
	*mock.Call
}

// UpdateProjectStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateProjectStatusParams
func (_e *Querier_Expecter) UpdateProjectStatus(ctx interface{}, arg interface{}) *Querier_UpdateProjectStatus_Call {
	return &Querier_UpdateProjectStatus_Call{Call: _e.mock.On("UpdateProjectStatus", ctx, arg)}
}

func (_c *Querier_UpdateProjectStatus_Call) Run(run func(ctx context.Context, arg db.UpdateProjectStatusParams)) *Querier_UpdateProjectStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateProjectStatusParams))
	})
	return _c
}

func (_c *Querier_UpdateProjectStatus_Call) Return(_a0 error) *Querier_UpdateProjectStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateProjectStatus_Call) RunAndReturn(run func(context.Context, db.UpdateProjectStatusParams) error) *Querier_UpdateProjectStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransactionStatus provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateTransactionStatus(ctx context.Context, arg db.UpdateTransactionStatusParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransactionStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateTransactionStatusParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateTransactionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransactionStatus'
type Querier_UpdateTransactionStatus_Call struct {
	*mock.Call
}

// UpdateTransactionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateTransactionStatusParams
func (_e *Querier_Expecter) UpdateTransactionStatus(ctx interface{}, arg interface{}) *Querier_UpdateTransactionStatus_Call {
	return &Querier_UpdateTransactionStatus_Call{Call: _e.mock.On("UpdateTransactionStatus", ctx, arg)}
}

func (_c *Querier_UpdateTransactionStatus_Call) Run(run func(ctx context.Context, arg db.UpdateTransactionStatusParams)) *Querier_UpdateTransactionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateTransactionStatusParams))
	})
	return _c
}

func (_c *Querier_UpdateTransactionStatus_Call) Return(_a0 error) *Querier_UpdateTransactionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateTransactionStatus_Call) RunAndReturn(run func(context.Context, db.UpdateTransactionStatusParams) error) *Querier_UpdateTransactionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserByID provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateUserByID(ctx context.Context, arg db.UpdateUserByIDParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUserByIDParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserByID'
type Querier_UpdateUserByID_Call struct {
	*mock.Call
}

// UpdateUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateUserByIDParams
func (_e *Querier_Expecter) UpdateUserByID(ctx interface{}, arg interface{}) *Querier_UpdateUserByID_Call {
	return &Querier_UpdateUserByID_Call{Call: _e.mock.On("UpdateUserByID", ctx, arg)}
}

func (_c *Querier_UpdateUserByID_Call) Run(run func(ctx context.Context, arg db.UpdateUserByIDParams)) *Querier_UpdateUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateUserByIDParams))
	})
	return _c
}

func (_c *Querier_UpdateUserByID_Call) Return(_a0 error) *Querier_UpdateUserByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateUserByID_Call) RunAndReturn(run func(context.Context, db.UpdateUserByIDParams) error) *Querier_UpdateUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPassword provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateUserPassword(ctx context.Context, arg db.UpdateUserPasswordParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUserPasswordParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type Querier_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateUserPasswordParams
func (_e *Querier_Expecter) UpdateUserPassword(ctx interface{}, arg interface{}) *Querier_UpdateUserPassword_Call {
	return &Querier_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", ctx, arg)}
}

func (_c *Querier_UpdateUserPassword_Call) Run(run func(ctx context.Context, arg db.UpdateUserPasswordParams)) *Querier_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateUserPasswordParams))
	})
	return _c
}

func (_c *Querier_UpdateUserPassword_Call) Return(_a0 error) *Querier_UpdateUserPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_UpdateUserPassword_Call) RunAndReturn(run func(context.Context, db.UpdateUserPasswordParams) error) *Querier_UpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
