// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: report.sql

package db

import (
	"context"
)

const createProjectReport = `-- name: CreateProjectReport :one
INSERT INTO project_reports (
    project_id, email, full_name, phone_number, relation, reason, details
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, project_id, email, full_name, phone_number, relation, reason, details, status, created_at
`

type CreateProjectReportParams struct {
	ProjectID   int64
	Email       string
	FullName    string
	PhoneNumber string
	Relation    *string
	Reason      string
	Details     string
}

func (q *Queries) CreateProjectReport(ctx context.Context, arg CreateProjectReportParams) (ProjectReport, error) {
	row := q.db.QueryRow(ctx, createProjectReport,
		arg.ProjectID,
		arg.Email,
		arg.FullName,
		arg.PhoneNumber,
		arg.Relation,
		arg.Reason,
		arg.Details,
	)
	var i ProjectReport
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Email,
		&i.FullName,
		&i.PhoneNumber,
		&i.Relation,
		&i.Reason,
		&i.Details,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getAllProjectReports = `-- name: GetAllProjectReports :many
SELECT id, project_id, email, full_name, phone_number, relation, reason, details, status, created_at FROM project_reports
ORDER BY created_at
`

func (q *Queries) GetAllProjectReports(ctx context.Context) ([]ProjectReport, error) {
	rows, err := q.db.Query(ctx, getAllProjectReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectReport
	for rows.Next() {
		var i ProjectReport
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Email,
			&i.FullName,
			&i.PhoneNumber,
			&i.Relation,
			&i.Reason,
			&i.Details,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectReportByID = `-- name: GetProjectReportByID :one
SELECT id, project_id, email, full_name, phone_number, relation, reason, details, status, created_at FROM project_reports
WHERE id = $1
`

func (q *Queries) GetProjectReportByID(ctx context.Context, id int64) (ProjectReport, error) {
	row := q.db.QueryRow(ctx, getProjectReportByID, id)
	var i ProjectReport
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Email,
		&i.FullName,
		&i.PhoneNumber,
		&i.Relation,
		&i.Reason,
		&i.Details,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getResolvedProjectReportsForProject = `-- name: GetResolvedProjectReportsForProject :many
SELECT id, project_id, email, full_name, phone_number, relation, reason, details, status, created_at FROM project_reports
WHERE project_id = $1 AND status = 'resolved'
`

func (q *Queries) GetResolvedProjectReportsForProject(ctx context.Context, projectID int64) ([]ProjectReport, error) {
	rows, err := q.db.Query(ctx, getResolvedProjectReportsForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectReport
	for rows.Next() {
		var i ProjectReport
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Email,
			&i.FullName,
			&i.PhoneNumber,
			&i.Relation,
			&i.Reason,
			&i.Details,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProjectReportStatus = `-- name: UpdateProjectReportStatus :exec
UPDATE project_reports
SET status = $2
WHERE id = $1
`

type UpdateProjectReportStatusParams struct {
	ID     int64
	Status ReportStatus
}

func (q *Queries) UpdateProjectReportStatus(ctx context.Context, arg UpdateProjectReportStatusParams) error {
	_, err := q.db.Exec(ctx, updateProjectReportStatus, arg.ID, arg.Status)
	return err
}
