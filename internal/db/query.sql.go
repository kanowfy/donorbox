// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateUser = `-- name: ActivateUser :exec
UPDATE users SET activated = TRUE
WHERE id = $1
`

func (q *Queries) ActivateUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, activateUser, id)
	return err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    user_id, title, description, cover_picture, goal_amount, country, province, end_date
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, user_id, title, description, cover_picture, goal_amount, current_amount, country, province, start_date, end_date, is_active
`

type CreateProjectParams struct {
	UserID       pgtype.UUID
	Title        string
	Description  string
	CoverPicture string
	GoalAmount   pgtype.Numeric
	Country      string
	Province     string
	EndDate      pgtype.Timestamptz
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.CoverPicture,
		arg.GoalAmount,
		arg.Country,
		arg.Province,
		arg.EndDate,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CoverPicture,
		&i.GoalAmount,
		&i.CurrentAmount,
		&i.Country,
		&i.Province,
		&i.StartDate,
		&i.EndDate,
		&i.IsActive,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, hashed_password, email, first_name, last_name, profile_picture
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, username, hashed_password, email, first_name, last_name, profile_picture, activated, user_type
`

type CreateUserParams struct {
	Username       string
	HashedPassword string
	Email          string
	FirstName      pgtype.Text
	LastName       pgtype.Text
	ProfilePicture pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePicture,
		&i.Activated,
		&i.UserType,
	)
	return i, err
}

const deleteProjectByID = `-- name: DeleteProjectByID :exec
DELETE FROM projects WHERE id = $1
`

func (q *Queries) DeleteProjectByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProjectByID, id)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const getAllProjects = `-- name: GetAllProjects :many
SELECT id, user_id, title, description, cover_picture, goal_amount, current_amount, country, province, start_date, end_date, is_active FROM projects
`

func (q *Queries) GetAllProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, getAllProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.CoverPicture,
			&i.GoalAmount,
			&i.CurrentAmount,
			&i.Country,
			&i.Province,
			&i.StartDate,
			&i.EndDate,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, hashed_password, email, first_name, last_name, profile_picture, activated, user_type FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.ProfilePicture,
			&i.Activated,
			&i.UserType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, user_id, title, description, cover_picture, goal_amount, current_amount, country, province, start_date, end_date, is_active FROM projects
WHERE id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id pgtype.UUID) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CoverPicture,
		&i.GoalAmount,
		&i.CurrentAmount,
		&i.Country,
		&i.Province,
		&i.StartDate,
		&i.EndDate,
		&i.IsActive,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, hashed_password, email, first_name, last_name, profile_picture, activated, user_type FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePicture,
		&i.Activated,
		&i.UserType,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, hashed_password, email, first_name, last_name, profile_picture, activated, user_type FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.ProfilePicture,
		&i.Activated,
		&i.UserType,
	)
	return i, err
}

const updateProjectFund = `-- name: UpdateProjectFund :exec
UPDATE projects SET current_amount = current_amount + $2
WHERE id = $1
`

type UpdateProjectFundParams struct {
	ID            pgtype.UUID
	CurrentAmount pgtype.Numeric
}

func (q *Queries) UpdateProjectFund(ctx context.Context, arg UpdateProjectFundParams) error {
	_, err := q.db.Exec(ctx, updateProjectFund, arg.ID, arg.CurrentAmount)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET hashed_password = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID             pgtype.UUID
	HashedPassword string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.HashedPassword)
	return err
}

const updateUserProfilePicture = `-- name: UpdateUserProfilePicture :exec
UPDATE users SET profile_picture = $2
WHERE id = $1
`

type UpdateUserProfilePictureParams struct {
	ID             pgtype.UUID
	ProfilePicture pgtype.Text
}

func (q *Queries) UpdateUserProfilePicture(ctx context.Context, arg UpdateUserProfilePictureParams) error {
	_, err := q.db.Exec(ctx, updateUserProfilePicture, arg.ID, arg.ProfilePicture)
	return err
}
